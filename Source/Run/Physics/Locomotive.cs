/* LOCOMOTIVE CLASSES
 * 
 * Used a a base for Steam, Diesel and Electric locomotive classes.
 * 
 * A locomotive is represented by two classes:
 *  LocomotiveSimulator - defines the behaviour, ie physics, motion, power generated etc
 *  LocomotiveViewer - defines the appearance in a 3D viewer including animation for wipers etc
 *  
 * Both these classes derive from corresponding classes for a basic TrainCar
 *  TrainCarSimulator - provides for movement, rolling friction, etc
 *  TrainCarViewer - provides basic animation for running gear, wipers, etc
 *  
 * Locomotives can either be controlled by a player, 
 * or controlled by the train's MU signals for brake and throttle etc.
 * The player controlled loco generates the MU signals which pass along to every
 * unit in the train.
 * For AI trains, the AI software directly generates the MU signals - there is no
 * player controlled train.
 * 
 * The end result of the physics calculations for the the locomotive is
 * a TractiveForce and a FrictionForce ( generated by the TrainCar class )
 * 
 */
/// COPYRIGHT 2009 by the Open Rails project.
/// This code is provided to enable you to contribute improvements to the open rails program.  
/// Use of the code for any other purpose or distribution of the code to anyone else
/// is prohibited without specific written permission from admin@openrails.org.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MSTS;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework;



namespace ORTS
{

    ///////////////////////////////////////////////////
    ///   SIMULATION BEHAVIOUR
    ///////////////////////////////////////////////////


    /// <summary>
    /// Adds Throttle, Direction, Horn, Sander and Wiper control
    /// to the basic TrainCar.
    /// Use as a base for Electric, Diesel or Steam locomotives.
    /// </summary>
    public class LocomotiveSimulator: TrainCarSimulator
    {
        public float ThrottlePercent = 0;
        public bool Forward = true;  // true = forward, false = reverse
        public bool Horn = false;
        public bool Bell = false;
        public bool Sander = false;  // false = off
        public bool Wiper = false;   // false = off

        public LocomotiveSimulator(WAGFile wagFile)
            : base(wagFile)
        {
        }

        public override void HandleKeyboard(KeyboardInput keyboard, GameTime gameTime)
        {
            // Direction Control
            if (keyboard.IsPressed(Keys.W))
            {
                this.Forward = true;
                CreateEvent(15);
            }
            if (keyboard.IsPressed(Keys.S))
            {
                this.Forward = false;
                CreateEvent(16);
            }
            Train.TrainDirectionForward = this.Forward;

            // Some extremely simple physics for the Throttle
            if( keyboard.IsPressed(Keys.D )) this.ThrottlePercent += 10;
            if (keyboard.IsPressed(Keys.A)) this.ThrottlePercent -= 10;
            if (this.ThrottlePercent < 0) this.ThrottlePercent = 0;
            if (this.ThrottlePercent > 100) this.ThrottlePercent = 100;

            //Some extremely simple physics for the Brake
            if (keyboard.IsPressed(Keys.OemQuotes) || keyboard.IsPressed(Keys.E)) Train.TrainBrakePercent += 10;
            if (keyboard.IsPressed(Keys.OemSemicolon)|| keyboard.IsPressed(Keys.Q)) Train.TrainBrakePercent -= 10;
            if (Train.TrainBrakePercent < 0) Train.TrainBrakePercent = 0;
            if (Train.TrainBrakePercent > 100) Train.TrainBrakePercent = 100;

            Train.TrainThrottlePercent = this.ThrottlePercent;

            // Horn
            if (keyboard.IsKeyDown(Keys.Space))
            {
                if (!Horn)
                {
                    Horn = true;
                    CreateEvent(8);
                }
            }
            else 
            {
                if (Horn)
                {
                    Horn = false;
                    CreateEvent(9);
                }
            }

            // Bell
            if (keyboard.IsKeyDown(Keys.B))
            {
                if (!Bell)
                {
                    Bell = true;
                    CreateEvent(10);
                }
            }
            else
            {
                if (Bell)
                {
                    Bell = false;
                    CreateEvent(11);
                }
            }

            // Sander
            if (keyboard.IsPressed(Keys.X))
            {
                Sander = !Sander;
                CreateEvent(26);  // sander toggled
                CreateEvent(Sander ? 4 : 5);  // on or off event
            }

            // Wiper
            if (keyboard.IsPressed(Keys.V))
            {
                Wiper = !Wiper;
                CreateEvent(Wiper ? 6 : 7);  // on or off event
            }

            base.HandleKeyboard(keyboard, gameTime);
        }

        public override void Update(GameTime gameTime)
        {
            // TODO  this is a wild simplification for electric and diesel electric
            float maxForceN = 300e3f * Train.TrainThrottlePercent/100f;   // TODO pull 300e3 from wag file
            float maxSpeedMpS = MpS.FromMpH(50) * Train.TrainThrottlePercent/100f;  // TODO pull 50 from wag file
            float currentSpeedMpS = Math.Abs(SpeedMpS);
            float balanceRatio = 1;
            if (maxSpeedMpS > currentSpeedMpS)
                balanceRatio = currentSpeedMpS / maxSpeedMpS;

            MotiveForceN = (Train.TrainDirectionForward ? 1 : -1) * maxForceN * ( 1f-balanceRatio); 

            // Variable1 is wheel rotation in m/sec for steam locomotives
            Variable2 = MotiveForceN/300e3f;   // force generated
            Variable1 = ThrottlePercent / 100f;   // throttle setting

            base.Update(gameTime);
        }

    } // LocomotiveSimualtor


}
