PROGRAMMING COMMENTS

PROGRAMS

ORTS has three executable programs:


Users launch ORTS with ORTS.exe - all it does is verify dependancies are installed.  This program
appears in Visual Studio as Launcher.   Once dependancies are checked, ORTS.EXE executes MENU.EXE.

MENU.EXE presents a menu for selection of the mini-route, route, and activity.  It also meant in
the future to provide settings for details levels, performance etc.   Once a route is selected
it executes RUN.EXE

RUN.EXE is the program that runs an activity.
It consists of a railroad Simulator module with one or more Viewers attached.   

The simulator engine contains all the elements for an operational route including representation
of signal conditions, switch track alignment, rolling stock location and movement, track paths, 
AI logic, physics calculations, essentially everything except the 3d representation of the objects.  
It is intended that the simulator engine could run in separate thread, or even on a separate computer.

There can be multiple viewers looking at the simulator - ie straight down activity editor type views,
or full 3D viewers, or perhaps in the future Tower operator's panels etc.   The 3D viewer is 
responsible for loading and rendering all the shape files in the 
scene.  It also handles movement of wheels and other animations embedded in the shape files. 
        
The source code consists of the following sub folders:

	Main - contains the openning dialog boxes to select a route and launch the sim
	Simulator - contains the simulation processes, including physics, ai etc
	3DViewer - contains the code for rendering the Simulator data in 3D on a users computer
	MSTS - contains code for reading and processing MSTS files
	Physics - contains rolling stock classes - these files contain only simulation behaviour - no rendering classes are included
	Common - classes common to the others


THREADING - the program is designed to make maximum use of multiprocessing.   There are at least three
threads planned:
- the main thread runs the 3d viewer
- a second thread handles background loading and unloading assets into the viewer - this is complete now
- the simulator engine engine will run in a third thread ( not done yet )
- the sound engine operates in a fourth thread.

Notes:  Use care to ensure drawablecomponent objects are fully initialized before adding them to the viewer.components list.


TIMING - as the simulator engine runs in a separate thread, and possibly on a separate computer, it
does not run necessarily in sync - TODO how will we handle this


ERROR HANDLING STRATEGY
- ORTS will always attempt to complete the load even in the presence of errored or missing files
	- when it encounters a recoverable error, it will list them in a ORTS Warnings file on your desktop
	- in order to continue, ORS may omit objects, use defaults etc
- if it can't continue, it will report the situation in a message box, and in the ORTS Warnings file and exit.

SCALAR UNITS
- meters are assumed for coordinates
- other scalers must have units appended, ie MpS, N, KG, MpS2 etc to avoid mistakes
- R = radians 
See also the info in Coordinates.cs on the coordinate spaces used in ORTS


TODO - use this comment to flag incomplete parts of your code.


COMMENTING STYLE

I place a lot of value on having a paragraph or two at the top of each file explaining what it contains, 
how the classes are used, and a few details about the internals.  I find this more useful than embedded
comments in the code so if you have to take shortcuts in commenting, try to at least provide the file header
comment block.


ERROR HANDLING

General practice on errors is to report and continue. 
- Console.Error.WriteLine( errormessage )
- then make adjustments, ie defaults etc to continue
If you can't continue, throw an exception
- and attempt to handle it further up


ROLES  PROPOSED
1 - engineer - in future, number cycles through engineers on train
	- arrows move - right - headout, left - head in
	- home end, page down, page up - must be stopped while on the ground
2,3,4 - railfans
6 - brakeman1
7 - brakeman2
	ctrl left right, moves from car to car
	pgdn, on the ground
	pgup, on the train , nearest car
	home, front of train
	end, back of train
5 - passenger
	up down, home, end - move along train
 - railfan
	- pgup - home, end, up, down
	- pgdn - on the ground
	
9 - fireman -  in future, number cycles through fireman on train
	- arrows move - right - headout, left - head in
	- home end, page down, page up

