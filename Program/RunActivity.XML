<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RunActivity</name>
    </assembly>
    <members>
        <member name="M:ORTS.DynatrackDrawer.#ctor(ORTS.Viewer3D,MSTS.DyntrackObj,ORTS.WorldPosition,ORTS.WorldPosition)">
            <summary>
            DynatrackDrawer constructor
            </summary>
        </member>
        <member name="M:ORTS.TrProfile.#ctor(MSTS.STFReader)">
            <summary>
            TrProfile constructor from STFReader-style profile file
            </summary>
        </member>
        <member name="M:ORTS.TrProfile.#ctor(System.Xml.XmlReader)">
            <summary>
            TrProfile constructor from XML profile file
            </summary>
        </member>
        <member name="M:ORTS.TrProfile.#ctor">
            <summary>
            TrProfile constructor (default - builds from self-contained data)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ORTS.LODItem.#ctor(System.String)" -->
        <member name="M:ORTS.LODItem.#ctor(MSTS.STFReader,ORTS.TrProfile)">
            <summary>
            LODITem constructor (DAT)
            </summary>
        </member>
        <member name="M:ORTS.Polyline.#ctor">
            <summary>
            Bare-bones Polyline constructor (used for XML)
            </summary>
        </member>
        <member name="M:ORTS.Polyline.#ctor(ORTS.TrProfile,System.String,System.UInt32)">
            <summary>
            Polyline constructor (default)
            </summary>
        </member>
        <member name="M:ORTS.Polyline.#ctor(MSTS.STFReader)">
            <summary>
            Polyline constructor (DAT)
            </summary>
        </member>
        <member name="M:ORTS.RenderPrimitive.Draw(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This is when the object actually renders itself onto the screen.
            Do not reference any volatile data.
            Executes in the RenderProcess thread
            </summary>
            <param name="graphicsDevice"></param>
        </member>
        <member name="M:ORTS.DynatrackMesh.#ctor(ORTS.RenderProcess,MSTS.DyntrackObj,ORTS.WorldPosition,ORTS.WorldPosition)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ORTS.DynatrackMesh.BuildMesh(ORTS.WorldPosition)">
            <summary>
            Builds a section of Dynatrack to TrProfile specifications as one vertex buffer and one index buffer.
            The order the buffers are built in reflects the nesting in the TrProfile.  The nesting order is:
            (LOD items (Polylines (Vertices))).  All vertices and indices are built contiguously for an LOD.
            </summary>
        </member>
        <member name="M:ORTS.DynatrackMesh.LinearGen">
            <summary>
            Initializes member variables for straight track sections.
            </summary>
        </member>
        <member name="M:ORTS.DynatrackMesh.CircArcGen">
            <summary>
            Initializes member variables for circular arc track sections.
            </summary>
        </member>
        <member name="M:ORTS.DynatrackMesh.LinearGen(System.UInt32,ORTS.Polyline)">
            <summary>
            Generates vertices for a succeeding cross section (straight track).
            </summary>
            <param name="stride">Index increment between section-to-section vertices.</param>
        </member>
        <member name="M:ORTS.DynatrackMesh.CircArcGen(System.UInt32,ORTS.Polyline)">
            <summary>
            /// Generates vertices for a succeeding cross section (circular arc track).
            </summary>
            <param name="stride">Index increment between section-to-section vertices.</param>
        </member>
        <member name="M:ORTS.DynatrackMesh.InitializeVertexBuffers(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes the vertex and triangle index list buffers.
            </summary>
        </member>
        <member name="M:ORTS.WorldLatLon.ConvertWTC(System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3,System.Double@,System.Double@)">
            <summary>
            Entry point to this series of methods
            Gets Longitude, Latitude from Goode X, Y
            </summary>        
            <param name="wt_ew_dat">Name of the east-west world tile</param>
            <param name="wt_ns_dat">Name of the north-south world tile</param>
            <param name="latitude">Latitude in radians, passed back to the caller by reference</param>
            <param name="longitude">Longitude in radians, passed back to the caller by reference</param>
        </member>
        <member name="M:ORTS.WorldLatLon.GoodeInit">
            <summary>
            Initialize the Goode coefficient arrays
            </summary>        
        </member>
        <member name="M:ORTS.WorldLatLon.Goode_Inverse(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert Goode XY coordinates to latitude and longitude
            </summary>        
        </member>
        <member name="M:ORTS.WorldLatLon.Sign(System.Double)">
            <summary>
            Returns the sign of a value
            </summary>        
        </member>
        <member name="M:ORTS.WorldLatLon.Adjust_Lon(System.Double)">
            <summary>
            Checks for Pi overshoot
            </summary>        
        </member>
        <member name="M:ORTS.ForestDrawer.#ctor(ORTS.Viewer3D,MSTS.ForestObj,ORTS.WorldPosition)">
            <summary>
            ForestDrawer constructor
            </summary>
        </member>
        <member name="M:ORTS.ForestMesh.#ctor(ORTS.RenderProcess,ORTS.Tiles,ORTS.ForestDrawer,MSTS.ForestObj)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ORTS.ForestMesh.InitForestVertices(ORTS.Tiles,Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture[])">
            <summary>
            Forest tree array intialization. 
            </summary>
        </member>
        <member name="T:ORTS.TDBTravellerDistanceCalculatorHelper">
            <summary>
            Helper class to calculate distances along the path
            </summary>
        </member>
        <member name="M:ORTS.ActivityTaskPassengerStopAt.IsAtStation">
            <summary>
            Determines if the train is at station
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORTS.SignalObject.this_sig_mr(ORTS.SignalHead.SIGFN)">
            <summary>
            Returns the most restrictive state of this signal's heads.
            </summary>
        </member>
        <member name="M:ORTS.SignalObject.this_sig_lr(ORTS.SignalHead.SIGFN)">
            <summary>
            Returns the least restrictive state of this signal's heads.
            </summary>
        </member>
        <member name="M:ORTS.SignalObject.Update">
            <summary>
            Perform the update for each head on this signal.
            </summary>
        </member>
        <member name="M:ORTS.SignalObject.DistanceTo(ORTS.TDBTraveller)">
            <summary>
            Returns the distance from the TDBtraveller to this signal. 
            </summary>
        </member>
        <member name="M:ORTS.SignalObject.isSignalHead(MSTS.SignalItem)">
            <summary>
            Check Whether signal head is for this signal.
            </summary>
        </member>
        <member name="M:ORTS.SignalObject.AddHead(System.Int32)">
            <summary>
            Adds a head to this signal.
            </summary>
        </member>
        <member name="M:ORTS.SignalObject.SetSignalType(MSTS.SIGCFGFile)">
            <summary>
            Sets the signal type from the sigcfg file for each signal head.
            </summary>
        </member>
        <member name="M:ORTS.SignalObject.GetMonitorAspect">
            <summary>
            Gets the display aspect for the track monitor.
            </summary>
        </member>
        <member name="P:ORTS.SignalObject.trItem">
            <summary>
            Gets the correspnding TrItem from the TDB.
            </summary>
        </member>
        <member name="T:ORTS.RollingStock.SharedGenericWAGFileManager">
            <summary>
            Utility class to avoid loading multiple copies of the same file.
            </summary>
        </member>
        <member name="T:ORTS.RollingStock.GenericWAGFile">
            <summary>
            This is an abbreviated parse to determine where to direct the file.
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.#ctor(ORTS.Simulator)">
            <summary>
            Construct a viewer.  At this time background processes are not running
            and the graphics device is not ready to accept content.
            </summary>
            <param name="simulator"></param>
        </member>
        <member name="M:ORTS.Viewer3D.Save(System.IO.BinaryWriter)">
            <summary>
            Save game
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.Restore(System.IO.BinaryReader)">
            <summary>
            Restore after game resumes
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.LoadUserSettings">
            <summary>
            Setup the game settings provided by the user in the main menu screen.
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.Configure(ORTS.RenderProcess)">
            <summary>
            Called once before the graphics device is started to configure the 
            graphics card and XNA game engine.
            Executes in the RenderProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.Initialize(ORTS.RenderProcess)">
            <summary>
            Called once after the graphics device is ready
            to load any static graphics content, background 
            processes haven't started yet.
            Executes in the RenderProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.LoadPrep">
            <summary>
            Called 10 times per second when its safe to read volatile data
            from the simulator and viewer classes in preparation
            for the Load call.  Copy data to local storage for use 
            in the next load call.
            Executes in the UpdaterProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.Load(ORTS.RenderProcess)">
            <summary>
            Called 10 times a second to load graphics content
            that comes and goes as the player and trains move.
            Called from background LoaderProcess Thread
            Do not access volatile data from the simulator 
            and viewer classes during the Load call ( see
            LoadPrep() )
            Executes in the LoaderProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.HandleUserInput(ORTS.ElapsedTime)">
            <summary>
            Called whenever a key or mouse buttin is pressed for handling user input
            elapsedTime represents the the time since the last call to HandleUserInput
            Examine the static class UserInput for mouse and keyboard status
            Executes in the UpdaterProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            Called every frame to update animations and load the frame contents .
            Note:  this doesn't actually draw on the screen surface, but 
            instead prepares a list of drawing primitives that will be rendered
            later in RenderFrame.Draw() by the RenderProcess thread.
            elapsedTime represents the the time since the last call to PrepareFrame
            Executes in the UpdaterProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.Unload(ORTS.RenderProcess)">
            <summary>
            Unload all graphical content and restore memory
            Executes in the RenderProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.ProcessReportError(System.Exception)">
            <summary>
            Report an Exception from a background process (e.g. loader).
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:ORTS.Viewer3D.ReadENVFile">
            <summary>
            Determine the correct environment files for this activity and read it in.
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.ToggleFullscreen">
            <summary>
            Adjust all projection matrixes and buffer sizes
            </summary>
        </member>
        <member name="M:ORTS.Viewer3D.ScreenHasChanged">
            <summary>
            Return true if the screen has changed dimensions
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORTS.Viewer3D.TryUncoupleAt">
            <summary>
            The user has left clicked with U pressed.   
            If the mouse was over a coupler, then uncouple the car.
            </summary>
            <param name="mouseX"></param>
            <param name="mouseY"></param>
        </member>
        <member name="M:ORTS.Viewer3D.TryThrowSwitchAt">
            <summary>
            The user has left clicked with U pressed.   
            If the mouse was over a coupler, then uncouple the car.
            </summary>
            <param name="mouseX"></param>
            <param name="mouseY"></param>
        </member>
        <member name="F:ORTS.TrainDrawer.LoadedCars">
            THREAD SAFETY WARNING -
        </member>
        <member name="M:ORTS.TrainDrawer.GetViewer(ORTS.TrainCar)">
            <summary>
            Get the viewer for this car.  If the car doesn't have a viewer, then load it.
            </summary>
            <param name="car"></param>
            <returns></returns>
        </member>
        <member name="M:ORTS.TrainDrawer.LoadPrep">
            <summary>
            Executes in the UpdateProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.TrainDrawer.Load(ORTS.RenderProcess)">
            <summary>
            Executes in the LoaderProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.TrainDrawer.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            Executes in the UpdateProcess thread.
            </summary>
        </member>
        <member name="T:ORTS.MSTSSteamLocomotive">
            <summary>
            Adds physics and control for a steam locomotive
            </summary>
        </member>
        <member name="T:ORTS.MSTSLocomotive">
            <summary>
            Adds Throttle, Direction, Horn, Sander and Wiper control
            to the basic TrainCar.
            Use as a base for Electric, Diesel or Steam locomotives.
            </summary>
        </member>
        <member name="T:ORTS.MSTSWagon">
            <summary>
            Represents the physical motion and behaviour of the car.
            </summary>
        </member>
        <member name="M:ORTS.MSTSWagon.InitializeFromWagFile(System.String)">
            <summary>
            This initializer is called when we haven't loaded this type of car before
            and must read it new from the wag file.
            </summary>
        </member>
        <member name="M:ORTS.MSTSWagon.Parse(System.String,MSTS.STFReader)">
            <summary>
            Parse the wag file parameters required for the simulator and viewer classes
            </summary>
        </member>
        <member name="M:ORTS.MSTSWagon.InitializeFromCopy(ORTS.MSTSWagon)">
            <summary>
            This initializer is called when we are making a new copy of a car already
            loaded in memory.  We use this one to speed up loading by eliminating the
            need to parse the wag file multiple times.
            
            IMPORTANT NOTE:  everything you initialized in parse, must be initialized here
            </summary>
        </member>
        <member name="M:ORTS.MSTSWagon.Save(System.IO.BinaryWriter)">
            <summary>
            We are saving the game.  Save anything that we'll need to restore the 
            status later.
            </summary>
        </member>
        <member name="M:ORTS.MSTSWagon.Restore(System.IO.BinaryReader)">
            <summary>
            We are restoring a saved game.  The TrainCar class has already
            been initialized.   Restore the game state.
            </summary>
        </member>
        <member name="M:ORTS.MSTSWagon.SignalEvent(ORTS.EventID)">
            <summary>
            Used when someone want to notify us of an event
            </summary>
        </member>
        <member name="M:ORTS.MSTSLocomotive.InitializeFromWagFile(System.String)">
            <summary>
            This initializer is called when we haven't loaded this type of car before
            and must read it new from the wag file.
            </summary>
        </member>
        <member name="M:ORTS.MSTSLocomotive.Parse(System.String,MSTS.STFReader)">
            <summary>
            Parse the wag file parameters required for the simulator and viewer classes
            </summary>
        </member>
        <member name="M:ORTS.MSTSLocomotive.InitializeFromCopy(ORTS.MSTSWagon)">
            <summary>
            This initializer is called when we are making a new copy of a car already
            loaded in memory.  We use this one to speed up loading by eliminating the
            need to parse the wag file multiple times.
            </summary>
        </member>
        <member name="M:ORTS.MSTSLocomotive.Save(System.IO.BinaryWriter)">
            <summary>
            We are saving the game.  Save anything that we'll need to restore the 
            status later.
            </summary>
        </member>
        <member name="M:ORTS.MSTSLocomotive.Restore(System.IO.BinaryReader)">
            <summary>
            We are restoring a saved game.  The TrainCar class has already
            been initialized.   Restore the game state.
            </summary>
        </member>
        <member name="M:ORTS.MSTSLocomotive.GetViewer(ORTS.Viewer3D)">
            <summary>
            Create a viewer for this locomotive.   Viewers are only attached
            while the locomotive is in viewing range.
            </summary>
        </member>
        <member name="M:ORTS.MSTSLocomotive.Update(System.Single)">
            <summary>
            This is a periodic update to calculate physics 
            parameters and update the base class's MotiveForceN 
            and FrictionForceN values based on throttle settings
            etc for the locomotive.
            </summary>
        </member>
        <member name="M:ORTS.MSTSLocomotive.SignalEvent(ORTS.EventID)">
            <summary>
            Used when someone want to notify us of an event
            </summary>
        </member>
        <member name="M:ORTS.MSTSLocomotive.GetDataOf(MSTS.CabViewControl)">
            <summary>
            Gets the Locomotive data needed by the Cav View Control
            Check here for Signal display
            </summary>
            <param name="cvc">The Cab View Control</param>
            <returns>The data converted to the requested unit</returns>
        </member>
        <member name="M:ORTS.MSTSSteamLocomotive.Parse(System.String,MSTS.STFReader)">
            <summary>
            Parse the wag file parameters required for the simulator and viewer classes
            </summary>
        </member>
        <member name="M:ORTS.MSTSSteamLocomotive.InitializeFromCopy(ORTS.MSTSWagon)">
            <summary>
            This initializer is called when we are making a new copy of a car already
            loaded in memory.  We use this one to speed up loading by eliminating the
            need to parse the wag file multiple times.
            NOTE:  you must initialize all the same variables as you parsed above
            </summary>
        </member>
        <member name="M:ORTS.MSTSSteamLocomotive.Save(System.IO.BinaryWriter)">
            <summary>
            We are saving the game.  Save anything that we'll need to restore the 
            status later.
            </summary>
        </member>
        <member name="M:ORTS.MSTSSteamLocomotive.Restore(System.IO.BinaryReader)">
            <summary>
            We are restoring a saved game.  The TrainCar class has already
            been initialized.   Restore the game state.
            </summary>
        </member>
        <member name="M:ORTS.MSTSSteamLocomotive.GetViewer(ORTS.Viewer3D)">
            <summary>
            Create a viewer for this locomotive.   Viewers are only attached
            while the locomotive is in viewing range.
            </summary>
        </member>
        <member name="M:ORTS.MSTSSteamLocomotive.Update(System.Single)">
            <summary>
            This is a periodic update to calculate physics 
            parameters and update the base class's MotiveForceN 
            and FrictionForceN values based on throttle settings
            etc for the locomotive.
            </summary>
        </member>
        <member name="M:ORTS.MSTSSteamLocomotive.SignalEvent(ORTS.EventID)">
            <summary>
            Used when someone want to notify us of an event
            </summary>
        </member>
        <member name="T:ORTS.MSTSSteamLocomotiveViewer">
            <summary>
            Adds any special steam loco animation to the basic LocomotiveViewer class
            </summary>
        </member>
        <member name="T:ORTS.MSTSLocomotiveViewer">
            <summary>
            Adds animation for wipers to the basic TrainCar
            </summary>
        </member>
        <member name="T:ORTS.MSTSWagonViewer">
            <summary>
            Note:  we need a separate viewer class since there could be multiple viewers
            for a single traincar, or possibly none
            </summary>
        </member>
        <member name="M:ORTS.TrainCarViewer.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            Called at the full frame rate
            elapsedTime is time since last frame
            Executes in the UpdaterThread
            </summary>
        </member>
        <member name="M:ORTS.MSTSWagonViewer.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            Called at the full frame rate
            elapsedTime is time since last frame
            Executes in the UpdaterThread
            </summary>
        </member>
        <member name="M:ORTS.MSTSWagonViewer.Unload">
            <summary>
            Unload and release the car - its not longer being displayed
            </summary>
        </member>
        <member name="M:ORTS.MSTSWagonViewer.LoadCarSounds(System.String)">
            <summary>
            Load the various car sounds
            </summary>
            <param name="wagonFolderSlash"></param>
        </member>
        <member name="M:ORTS.MSTSWagonViewer.LoadCarSound(System.String,System.String)">
            <summary>
            Load the car sound, attach it to the car
            check first in the wagon folder, then the global folder for the sound.
            If not found, report a warning.
            </summary>
            <param name="wagonFolderSlash"></param>
            <param name="filename"></param>
        </member>
        <member name="M:ORTS.MSTSWagonViewer.LoadTrackSounds">
            <summary>
            Load the inside and outside sounds for the default level 0 track type.
            </summary>
        </member>
        <member name="M:ORTS.MSTSWagonViewer.LoadTrackSound(System.String)">
            <summary>
            Load the sound source, attach it to the car.
            Check first in route\SOUND folder, then in base\SOUND folder.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:ORTS.MSTSLocomotiveViewer.HandleUserInput(ORTS.ElapsedTime)">
            <summary>
            A keyboard or mouse click has occurred. Read the UserInput
            structure to determine what was pressed.
            </summary>
        </member>
        <member name="M:ORTS.MSTSLocomotiveViewer.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            We are about to display a video frame.  Calculate positions for 
            animated objects, and add their primitives to the RenderFrame list.
            </summary>
        </member>
        <member name="M:ORTS.MSTSLocomotiveViewer.Unload">
            <summary>
            This doesn't function yet.
            </summary>
        </member>
        <member name="M:ORTS.MSTSSteamLocomotiveViewer.HandleUserInput(ORTS.ElapsedTime)">
            <summary>
            A keyboard or mouse click has occured. Read the UserInput
            structure to determine what was pressed.
            </summary>
        </member>
        <member name="M:ORTS.MSTSSteamLocomotiveViewer.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            We are about to display a video frame.  Calculate positions for 
            animated objects, and add their primitives to the RenderFrame list.
            </summary>
        </member>
        <member name="M:ORTS.MSTSSteamLocomotiveViewer.Unload">
            <summary>
            This doesn't function yet.
            </summary>
        </member>
        <member name="M:ORTS.AI.#ctor(ORTS.Simulator)">
            <summary>
            Loads AI train information from activity file.
            Creates a queue of AI trains in the order they should appear.
            At the moment AI trains are also created off scene so the rendering code will know about them.
            </summary>
        </member>
        <member name="M:ORTS.AI.Update(System.Single)">
            <summary>
            Updates AI train information.
            Creates any AI trains that are scheduled to appear.
            Moves all active AI trains by calling their Update method.
            And finally, removes any AI trains that have reached the end of their path.
            </summary>
        </member>
        <member name="M:ORTS.AI.CreateAITrain(MSTS.Service_Definition)">
            <summary>
            Creates an AI train
            Moves the models down 1000M to make them invisible.
            </summary>
        </member>
        <member name="M:ORTS.AI.RemoveTrains">
            <summary>
            Removes AI trains that have reached the end of their path or
            have been coupled onto by the player train.
            Moves the models down 1000M to make them invisible.
            </summary>
        </member>
        <member name="T:MSTS.STFReader">
            <summary>Used for reading data from Structured Text Format (MSTS1 style) files.
            </summary><remarks><para>
            An STF file is whitespace delimitered file, taking the format - {item}{whitespace}[repeated].</para><para>
             </para><para>
            At it's most simple an STF file has the format - {token_item}{whitespace}{data_item}{whitespace}(repeated)</para><para>
            Even, more simplisitically every {data_item} can be a {constant_item}</para>
            <code lang="STF" title="STF Example"><para>
                Example:</para><para>
                name SimpleSTFfile</para><para>
                weight 100</para><para>
                speed 50.25</para>
            </code> <para>
            STF also has a block methodology where a {data_item} following a {token_item} can start with '(' followed by any number of {data_item}s and closed with a ')'.
            The contents of the block are defined in the specific file schema, and not in the STF definition.
            The STF defintion allows that inside a pair of parentheses may be a single {constant_item}, multiple whitespace delimitered {constant_item}s, or a nested {token_item}{data_item} pair (which could contain a further nested block recursively).</para>
            <code lang="STF" title="STF Example"><para>
                Example:</para><para>
                name BlockedSTFfile</para><para>
                root_constant 100</para><para>
                root_block_1</para><para>
                (</para><para>
                      nested_block_1_1</para><para>
                      (</para><para>
                            1</para><para>
                      )</para><para>
                      nested_block_1_2 ( 5 )</para><para>
                )</para><para>
                root_block_2</para><para>
                (</para><para>
                      1 2 3</para><para>
                )</para><para>
                root_block_3 ( a b c )</para>
            </code> <para>
            Numeric {constan_item}s can include a 'unit' suffix, which is handled in the ReadDouble() function.</para><para>
            Within ReadDouble these units are then converted to the standards used throughout OR - meters, newtons, kilograms.</para>
            <code lang="STF" title="STF Example"><para>
                Example:</para><para>
                name STFfileWithUnits</para><para>
                weight 100kg</para><para>
                speed 50mph</para>
            </code> <para>
            Whitespaces can be included within any {item} using a double quotation notation.
            Quoted values also support a trailing addition operator to indicate an append operation of multiple quoted strings.</para><para>
            Although append operations are technically allowed for {token_item}'s this practice is *strongly* discouraged for readability.</para>
            <code lang="STF" title="STF Example"><para>
                Example:</para><para>
                simple_token "Data Item with" + " whitespace"</para><para>
                block_token ( "Data " + "Item 1" "Data Item 2" )</para><para>
                "discouraged_" + "token" -1</para><para>
                Error Example:</para><para>
                error1 "You cannot use append suffix to non quoted " + items</para>
            </code> <para>
            The STF format also supports 3 special {token_item}s - include, comment &amp; skip.</para><list class="bullet">
            <listItem><para>include - must be at the root level (that is to say it cannot be included within a block).
            After an include directive the {constant_item} is a filename relative to the current processing STF file.
            The include token has the effect of in-lining the defined file into the current document.</para></listItem>
            <listItem><para>comment &amp; skip - must be followed by a block which will not be processed in OR</para></listItem>
            </list> <para>
            Finally any token which begins with a '#' character will be ignored, and then the next {data_item} (constant or block) will not be processed.</para>
            </remarks>
            <example>
            !!!TODO!!!
            </example>
            <exception cref="T:MSTS.STFException"><para>
            STF reports errors using the  exception static members</para><para>
            There are three broad categories of error</para><list class="bullet">
            <listItem><para>Failure - Something which prevents loading from continuing, this throws an unhandled exception and drops out of Open Rails.</para></listItem>
            <listItem><para>Error - The data read does not have logical meaning - STFReader does not generate these errors, this is only appropriate STFReader consumers who understand the context of the data being processed</para></listItem>
            <listItem><para>Warning - When an error which can be programatically recovered from should be reported back to the user</para></listItem>
            </list>
            </exception>
        </member>
        <member name="M:MSTS.STFReader.#ctor(System.String)">
            <summary>Open a file, reader the header line, and prepare for STF parsing
            </summary>
            <param name="filename">Filename of the STF file to be opened and parsed.</param>
        </member>
        <member name="M:MSTS.STFReader.#ctor(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>Use an open stream for STF parsing, this constructor assumes that the SIMIS signature has already been gathered (or there isn't one)
            </summary>
            <param name="inputStream">Stream that will be parsed.</param>
            <param name="fileName">Is only used for error reporting.</param>
            <param name="encoding">One of the Encoding formats, defined as static members in Encoding which return an Encoding type.  Eg. Encoding.ASCII or Encoding.Unicode</param>
        </member>
        <member name="M:MSTS.STFReader.Dispose">
            <summary>Implements the IDisposable interface so this class can be implemented with the 'using(STFReader r = new STFReader(...)) {...}' C# statement.
            </summary>
        </member>
        <member name="M:MSTS.STFReader.Dispose(System.Boolean)">
            <summary>Releases the resources used by the STFReader.
            </summary>
            <param name="disposing">
            <para>true - release managed and unmanaged resources.</para>
            <para>false - release only unmanaged resources.</para>
            </param>
        </member>
        <member name="M:MSTS.STFReader.ReadItem">
            <summary>This is the main function in STFReader, it returns the next whitespace delimited {item} from the STF file.
            </summary>
            <returns>The next {item} from the STF file, any surrounding quotations will be not be returned.</returns>
        </member>
        <member name="M:MSTS.STFReader.RewindItem">
            <summary>Calling this function causes ReadItem() to repeat the last {item} that was read from the STF file
            </summary>
            <remarks>
            <para>The current implementation of RewindItem() only allows for "rewind".</para>
            <para>This means that there each call to RewindItem() must have an intervening call to ReadItem().</para>
            </remarks>
        </member>
        <member name="M:MSTS.STFReader.MustMatch(System.String)">
            <summary>Reports a critical error if the next {item} does not match the target.
            </summary>
            <param name="target">The next {item} contents we are expecting in the STF file.</param>
            <returns>The {item} read from the STF file</returns>
        </member>
        <member name="M:MSTS.STFReader.EndOfBlock">
            <summary>Returns true if the next character is the end of block, or end of file. Consuming the closing ")" all other values are not consumed.
            </summary>
            <remarks>
            <para>An STF block should be enclosed in parenthesis, ie ( {data_item} {data_item} )</para>
            </remarks>
            <returns>
            <para>true - An EOF, or closing parenthesis was found and consumed.</para>
            <para>false - Another type of {item} was found but not consumed.</para>
            </returns>
        </member>
        <member name="M:MSTS.STFReader.SkipBlock">
            <summary>Read a block open (, and then consume the rest of the block without processing.
            If we find an immediate close ), then produce a warning, and return without consuming the parenthesis.
            </summary>
        </member>
        <member name="M:MSTS.STFReader.SkipRestOfBlock">
            <summary>Skip to the end of this block, ignoring any nested blocks
            </summary>
        </member>
        <member name="F:MSTS.STFReader.IncludeReader">
            <summary>IncludeReader is used recursively in ReadItem() to handle the 'include' token, file include mechanism
            </summary>
        </member>
        <member name="F:MSTS.STFReader.previousItem">
            <summary>Remembers the last returned ReadItem().  If the next {item] is a '(', this is the block name used in the tree.
            </summary>
        </member>
        <member name="F:MSTS.STFReader.tree">
            <summary>A list describing the hierachy of nested block tokens
            </summary>
        </member>
        <member name="F:MSTS.STFReader.tree_cache">
            <summary>The tree cache is used to minimize the calls to StringBuilder when Tree is called repetively for the same hierachy.
            </summary>
        </member>
        <member name="F:MSTS.STFReader.rewindNextReadItemFlag">
            <summary>This flag is set in RewindItem(), and causes ReadItem(), to use the rewind* variables to do an item repeat
            </summary>
        </member>
        <member name="F:MSTS.STFReader.rewindTree">
            <summary>The rewind* variables store the previous state, so RewindItem() can jump back on {item}. rewindTree « tree
            <para>This item, is optimized, so when value is null it means rewindTree was the same as Tree, so we don't create unneccessary memory duplicates of lists.</para>
            </summary>
        </member>
        <member name="F:MSTS.STFReader.rewindCurrItem">
            <summary>The rewind* variables store the previous state, so RewindItem() can jump back on {item}. rewindCurrItem « previousItem
            </summary>
        </member>
        <member name="F:MSTS.STFReader.rewindItem">
            <summary>The rewind* variables store the previous state, so RewindItem() can jump back on {item}. rewindItem « ReadItem() return
            </summary>
        </member>
        <member name="M:MSTS.STFReader.ReadItem(System.Boolean)">
            <summary>This is the main function that reads an item from the STF stream.
            </summary>
            <param name="skip_mode">True - we are in a skip function, and so we don't want to do any special token processing.</param>
            <returns>The next item from the STF file</returns>
        </member>
        <member name="M:MSTS.STFReader.UpdateTreeAndRewindBuffer(System.String)">
            <summary>Internal Implementation
            <para>This function is called by ReadItem() for every item read from the STF file (and Included files).</para>
            <para>If a block instuction is found, then tree list is updated.</para>
            <para>As this function is called once per ReadItem() is stores the previous value in rewind* variables (there is additional optimization that we only copy rewindTree if the tree has changed.</para>
            <para>Now when the rewind flag is set, we use the rewind* copies, to move back exactly one item.</para>
            </summary>
            <param name="token"></param>
        </member>
        <member name="P:MSTS.STFReader.EOF">
            <summary>Property that returns true when the EOF has been reached
            </summary>
        </member>
        <member name="P:MSTS.STFReader.FileName">
            <summary>Filename property for the file being parsed - for reporting purposes
            </summary>
        </member>
        <member name="P:MSTS.STFReader.LineNumber">
            <summary>Line Number property for the file being parsed - for reporting purposes
            </summary>
        </member>
        <member name="P:MSTS.STFReader.SIMISsignature">
            <summary>SIMIS header read from the first line of the file being parsed
            </summary>
        </member>
        <member name="P:MSTS.STFReader.Tree">
            <summary>Property returning the last {item} read using ReadItem() prefixed with string describing the nested block hierachy.
            <para>The string returned is formatted 'rootnode(nestednode(childnode(previous_item'.</para>
            </summary>
            <remarks>
            Tree is expensive method of reading STF files (especially for the GC) and should be avoided if possible.
            </remarks>
        </member>
        <member name="T:MSTS.CAMCFGFile">
            <summary>
            Object used by ORTS.Cameras to set up views (3dviewer\camera.cs)
            </summary>
        </member>
        <member name="T:MSTS.camera">
            <summary>
            Individual camera object from the config file
            </summary>
        </member>
        <member name="T:ORTS.UserInput">
            <summary>
            This class adds ability to detect a key click ( press and release )
            to the basic XNA keyboard handling functionality.
            And forms the starting point for a customizable input scenario
            where keyboard and mouse input is converted to symbolic commands and
            its these commands that the viewer class responds to.
            NOTE - I found the keyboard could only be read in the XNA Game Loop (RenderProcess) thread.
            </summary>
        </member>
        <member name="M:ORTS.WaterTile.PrepareFrame(ORTS.RenderFrame)">
            <summary>
            This is called when the game should draw itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:ORTS.WaterTile.Draw(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This is called when the water should draw itself.
            </summary>
        </member>
        <member name="T:ORTS.SceneryDrawer">
            <summary>
            Handles loading and unloading of WFiles as the viewer moves across the route.
            </summary>
            Maintains an array of the loaded WorldFiles.  As the camera moves, Update
            scans the array, removing WorldFiles that are out of range, and creating new
            WorldFile objects for WFiles that come into range.
        </member>
        <member name="M:ORTS.SceneryDrawer.#ctor(ORTS.Viewer3D)">
            <summary>
            Scenery objects will be loaded into this viewer.
            </summary>
        </member>
        <member name="M:ORTS.SceneryDrawer.LoadPrep">
            <summary>
            Called 10 times per second when its safe to read volatile data
            from the simulator and viewer classes in preparation
            for the Load call.  Copy data to local storage for use 
            in the next load call.
            Executes in the UpdaterProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.SceneryDrawer.Load(ORTS.RenderProcess)">
            <summary>
            Called 10 times a second to load graphics content
            that comes and goes as the player and trains move.
            Called from background LoaderProcess Thread
            Do not access volatile data from the simulator 
            and viewer classes during the Load call ( see
            LoadPrep() )
            Executes in the LoaderProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.SceneryDrawer.LoadAt(System.Int32,System.Int32)">
            <summary>
            If the specified wFile isn't already loaded, then
            load it into any available location in the 
            WorldFiles array.
            </summary>
        </member>
        <member name="T:ORTS.WorldFile">
            <summary>
            Represents a loaded WFile.
            </summary>
        </member>
        <member name="M:ORTS.WorldFile.#ctor(ORTS.Viewer3D,System.Int32,System.Int32)">
            <summary>
            Open the specified WFile and load all the scenery objects into the viewer.
            If the file doesn't exist, then return an empty WorldFile object.
            </summary>
        </member>
        <member name="M:ORTS.WorldFile.WorldPositionFromMSTSLocation(System.Int32,System.Int32,MSTS.STFPositionItem,MSTS.STFQDirectionItem)">
            <summary>
            MSTS WFiles represent some location with a position, quaternion and tile coordinates
            This converts it to the ORTS WorldPosition representation
            </summary>
        </member>
        <member name="M:ORTS.WorldFile.WorldPositionFromMSTSLocation(System.Int32,System.Int32,MSTS.STFPositionItem,MSTS.Matrix3x3)">
            <summary>
            MSTS WFiles represent some location with a position, 3x3 matrix and tile coordinates
            This converts it to the ORTS WorldPosition representation
            </summary>
        </member>
        <member name="M:ORTS.WorldFile.Dispose">
            <summary>
            Unload the scenery objects related to this WFile.
            </summary>
        </member>
        <member name="M:ORTS.WorldFile.WorldFileNameFromTileCoordinates(System.Int32,System.Int32)">
            <summary>
            Build a w filename from tile X and Z coordinates.
            Returns a string eg "w-011283+014482.w"
            </summary>
        </member>
        <member name="M:ORTS.WorldFile.FormatTileCoordinate(System.Int32)">
            <summary>
            For building a filename from tile X and Z coordinates.
            Returns the string representation of a coordinate
            eg "+014482"
            </summary>
        </member>
        <member name="T:ORTS.Light">
            <summary>
            The Light class encapsulates the data for each Light object 
            in the Lights block of an ENG/WAG file. 
            </summary>
        </member>
        <member name="T:ORTS.Lights">
            <summary>
            A Lights object is created for any engine or wagon having a 
            Lights block in its ENG/WAG file. It contains a collection of
            Light objects.
            Called from within the MSTSWagon class.
            </summary>
        </member>
        <member name="M:ORTS.Lights.ReadWagLights(MSTS.STFReader)">
            <summary>
            Reads the Lights block of an ENG/WAG file
            </summary>
        </member>
        <member name="T:ORTS.LightState">
            <summary>
            A LightState object encapsulates the data for each State 
            in the States subblock.
            </summary>
        </member>
        <member name="M:ORTS.LightState.ReadLightState(MSTS.STFReader)">
            <summary>
            Reads the State data from the current States subblock.
            </summary>
        </member>
        <member name="M:ORTS.LightGlowDrawer.#ctor(ORTS.Viewer3D,ORTS.TrainCar,System.Boolean)">
            <summary>
            LightGlowDrawer constructor
            </summary>
        </member>
        <member name="M:ORTS.LightGlowMesh.#ctor(ORTS.RenderProcess,ORTS.TrainCar,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ORTS.LightGlowMesh.InitVertices">
            <summary>
            LightGlow light array intialization. 
            </summary>
        </member>
        <member name="T:ORTS.LightGlowVertex">
            <summary>
            Custom light glow vertex format.
            </summary>
        </member>
        <member name="M:ORTS.LightGlowVertex.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
            <summary>
            Light glow vertex constructor.
            </summary>
            <param name="position">quad position</param>
            <param name="normal">quad normals</param>
            <param name="rgbcolor">rgb color</param>
            <param name="alphascaletex">color alpha, quad scale, texture coords</param>
            <param name="flags">headlight, unit, fadein, fadeout</param>
            TODO: Expand as needed for increased functionality
        </member>
        <member name="M:ORTS.Materials.Initialize(ORTS.RenderProcess)">
            <summary>
            THREAD SAFETY:  XNA Content Manager is not thread safe and must only be called from the Game thread.
            ( per Shawn Hargreaves )
            </summary>
            <param name="renderProcess"></param>
        </member>
        <member name="M:ORTS.SkyMaterial.FogDay2Night(System.Single,System.Single)">
            <summary>
            This function darkens the fog color as night begins to fall
            as well as with increasing overcast.
            </summary>
            <param name="sunHeight">The Y value of the sunlight vector</param>
            <param name="overcast">The amount of overcast</param>
        </member>
        <member name="T:ORTS.YellowMaterial">
            <summary>
            This material is used for debug and testing.
            </summary>
        </member>
        <member name="M:ORTS.TerrainDrawer.LoadPrep">
            <summary>
            Called 10 times per second when its safe to read volatile data
            from the simulator and viewer classes in preparation
            for the Load call.  Copy data to local storage for use 
            in the next load call.
            Executes in the UpdaterProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.TerrainDrawer.Load(ORTS.RenderProcess)">
            <summary>
            Called 10 times a second to load graphics content
            that comes and goes as the player and trains move.
            Called from background LoaderProcess Thread
            Do not access volatile data from the simulator 
            and viewer classes during the Load call ( see
            LoadPrep() )
            Executes in the LoaderProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.TerrainDrawer.LoadAt(System.Int32,System.Int32)">
            <summary>
            If the specified tile isn't already loaded, then
            load it into any available location in the 
            TerrainTiles array.
            </summary>
            <param name="tileX"></param>
            <param name="tileZ"></param>
        </member>
        <member name="M:ORTS.TerrainPatch.Draw(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This is called when the game should draw itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:ORTS.TerrainPatch.Elevation(System.Int32,System.Int32)">
            <summary>
            Return the terrain elevation in meters above sea level 
            from the specified vertex indices
            x = 0 to 255 from w to e
            z = 0 to 255 from n to s 
            </summary>
            <param name="x"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:ORTS.TerrainPatch.SpecificTerrainNormal(System.Int32,System.Int32)">
            <summary>
            Return the vertex normal at the specified 
            terrain vertex indices
            x = 0 to 255 from w to e
            z = 0 to 255 from n to s 
            </summary>
            <param name="x"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:MSTS.MSTSPath">
            <summary>
            Deals with the MSTS file structure.
            </summary>
        </member>
        <member name="M:MSTS.MSTSPath.Base">
            <summary>
            Returns the base path of the MSTS installation
            </summary>
            <returns>no trailing \</returns>
        </member>
        <member name="M:MSTS.MSTSPath.RouteFolder(System.String)">
            <summary>
            Returns the route folder with out trailing \
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:MSTS.MSTSPath.TrainSoundPath(System.String,System.String)">
            <summary>
            Given a soundfile reference in a wag or eng file, return the path the sound file
            </summary>
            <param name="wagfilename"></param>
            <param name="soundfile"></param>
            <returns></returns>
        </member>
        <member name="M:MSTS.MSTSPath.SMSSoundPath(System.String,System.String)">
            <summary>
            Given a soundfile reference in a cvf file, return the path to the sound file
            </summary>
            <param name="wagfilename"></param>
            <param name="soundfile"></param>
            <returns></returns>
        </member>
        <member name="M:MSTS.PATTraveller.#ctor(System.String)">
            <summary>
            Initializes the traveller to the first waypoint 
            in the specified path file.
            </summary>
            <param name="PATFilePath"></param>
        </member>
        <member name="T:MSTS.PATFile">
            <summary>
            Work with consist files, contains an ArrayList of ConsistTrainset
            </summary>
        </member>
        <member name="M:MSTS.PATFile.#ctor(System.String)">
            <summary>
            Open a PAT file, 
            filePath includes full path and extension
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:ORTS.RenderFrame.AddAutoPrimitive(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,ORTS.Material,ORTS.RenderPrimitive,ORTS.RenderPrimitiveGroup,Microsoft.Xna.Framework.Matrix@,ORTS.ShapeFlags)">
            <summary>
            Automatically adds or culls a <see cref="T:ORTS.RenderPrimitive"/> based on a location, radius and max viewing distance.
            </summary>
            <remarks>
            Must be called from the UpdateProcess thread.
            </remarks>
            <param name="mstsLocation">Center location of the <see cref="T:ORTS.RenderPrimitive"/> in MSTS coordinates.</param>
            <param name="objectRadius">Radius of a sphere containing the whole <see cref="T:ORTS.RenderPrimitive"/>, centered on <paramref name="mstsLocation"/>.</param>
            <param name="objectViewingDistance">Maximum distance from which the <see cref="T:ORTS.RenderPrimitive"/> should be viewable.</param>
            <param name="material"></param>
            <param name="primitive"></param>
            <param name="xnaMatrix"></param>
            <param name="flags"></param>
        </member>
        <member name="M:ORTS.RenderFrame.AddPrimitive(ORTS.Material,ORTS.RenderPrimitive,ORTS.RenderPrimitiveGroup,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Executed in the UpdateProcess thread
            </summary>
        </member>
        <member name="M:ORTS.RenderFrame.AddPrimitive(ORTS.Material,ORTS.RenderPrimitive,ORTS.RenderPrimitiveGroup,Microsoft.Xna.Framework.Matrix@,ORTS.ShapeFlags)">
            <summary>
            Executed in the UpdateProcess thread
            </summary>
        </member>
        <member name="M:ORTS.RenderFrame.AddShadowPrimitive(ORTS.Material,ORTS.RenderPrimitive,Microsoft.Xna.Framework.Matrix@,ORTS.ShapeFlags)">
            <summary>
            Executed in the UpdateProcess thread
            </summary>
        </member>
        <member name="M:ORTS.RenderFrame.Sort">
            <summary>
            Executed in the UpdateProcess thread
            </summary>
        </member>
        <member name="M:ORTS.RenderFrame.Draw(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Draw 
            Executed in the RenderProcess thread 
            </summary>
            <param name="graphicsDevice"></param>
        </member>
        <member name="M:ORTS.RenderFrame.DrawSimple(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Executed in the RenderProcess thread - simple draw
            </summary>
            <param name="graphicsDevice"></param>
        </member>
        <member name="M:ORTS.SoundProcess.#ctor(ORTS.Viewer3D)">
            <summary>
            Constructs SoundProcess, creates the sound thread but not start. Must create after loading ingame sounds.
            </summary>
        </member>
        <member name="M:ORTS.SoundProcess.Run">
            <summary>
            Checks the SoundDetail level, and if above 0, starts sound thread.
            </summary>
        </member>
        <member name="M:ORTS.SoundProcess.Stop">
            <summary>
            Stops sound thread
            </summary>
        </member>
        <member name="M:ORTS.SoundProcess.AddSoundSource(System.Object,System.Collections.Generic.List{ORTS.SoundSource})">
            <summary>
            Adds a SoundSource list attached to an object to the playable sounds.
            </summary>
            <param name="viewer">The viewer object, could be anything</param>
            <param name="sources">List of SoundSources to play</param>
        </member>
        <member name="M:ORTS.SoundProcess.RemoveSoundSource(System.Object)">
            <summary>
            Removes a SoundSource list attached to an object from the playable sounds.
            </summary>
            <param name="viewer">The viewer object the sounds attached to</param>
        </member>
        <member name="M:ORTS.SoundProcess.SoundUpdateLoop">
            <summary>
            The loop running in the thread
            </summary>
        </member>
        <member name="T:MSTS.SharedSMSFileManager">
            <summary>
            Utility class to avoid loading multiple copies of the same file.
            </summary>
        </member>
        <member name="T:MSTS.SMSFile">
            <summary>
            Represents the hiearchical structure of the SMS File
            </summary>
        </member>
        <member name="M:ORTS.MSTSCoupling.Save(System.IO.BinaryWriter)">
            <summary>
            We are saving the game.  Save anything that we'll need to restore the 
            status later.
            </summary>
        </member>
        <member name="M:ORTS.MSTSCoupling.Restore(System.IO.BinaryReader)">
            <summary>
            We are restoring a saved game.  The TrainCar class has already
            been initialized.   Restore the game state.
            </summary>
        </member>
        <member name="T:ORTS.CarManager">
            <summary>
            Utility class to avoid loading the wag file multiple times
            </summary>
        </member>
        <member name="M:MSTSMath.M.Survey(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Consider a line starting a pX,pZ and heading away at deg from North
            returns lat =  distance of x,z off of the line
            returns lon =  distance of x,z along the line
            </summary>
            <param name="pX"></param>
            <param name="pZ"></param>
            <param name="deg"></param>
            <param name="x"></param>
            <param name="z"></param>
            <param name="lon"></param>
            <param name="lat"></param>
        </member>
        <member name="M:MSTSMath.M.DistanceToLine(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Given a line described by ax + by + c = 0 where a^2 + b^2 = 1
            Returns the signed distance from x,y to the line.
            From http://softsurfer.com/Archive/algorithm_0102/algorithm_0102.htm
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MSTSMath.M.AngleDxDz(System.Single,System.Single)">
            <summary>
            Compute the angle in radians resulting from these delta's
            0 degrees is straight ahead - Dz = 0, Dx = 1;
            </summary>
            <param name="Dx"></param>
            <param name="Dz"></param>
            <returns></returns>
        </member>
        <member name="T:MSTS.TDBFile">
            <summary>
            Summary description for TDBFile.
            </summary>
            
        </member>
        <member name="M:MSTS.TDBFile.GetTrJunctionNode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Provide a link to the TrJunctionNode for the switch track with 
            the specified UiD on the specified tile.
            
            Called by switch track shapes to determine the correct position of the points.
            </summary>
            <param name="tileX"></param>
            <param name="tileZ"></param>
            <param name="UiD"></param>
            <returns></returns>
        </member>
        <member name="T:MSTS.SRVFile">
            <summary>
            Work with Service Files
            </summary>
        </member>
        <member name="M:MSTS.SRVFile.#ctor(System.String)">
            <summary>
            Open a service file, 
            filePath includes full path and extension
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:ORTS.WAVIrrKlangFileFactory.openFile(System.String)">
            <summary>
            IFileFactory Interface memeber to open the given file
            </summary>
            <param name="filename">Name of the file</param>
            <returns>The opened stream</returns>
        </member>
        <member name="M:ORTS.WAVIrrKlangFileFactory.isPlaying(System.String)">
            <summary>
            Check if a sound file is still playing
            </summary>
            <param name="FileName">Name of the file</param>
            <returns>True if still playing</returns>
        </member>
        <member name="M:ORTS.WAVIrrKlangFileFactory.Weigth(System.String)">
            <summary>
            Tries to find a suitable number to represent the Length
            </summary>
            <param name="FileName">Name of the file</param>
            <returns>The relative weight</returns>
        </member>
        <member name="M:ORTS.WAVIrrKlangFileFactory.StartLoopRelease(System.String)">
            <summary>
            Provide error free call to BeginLoop on Stream
            </summary>
            <param name="FileName">Name of the file, also key in dictionary</param>
        </member>
        <member name="M:ORTS.WAVIrrKlangFileFactory.StartLoop(System.String)">
            <summary>
            Provide error free call to BeginLoop on Stream
            </summary>
            <param name="FileName">Name of the file, also key in dictionary</param>
        </member>
        <member name="M:ORTS.WAVIrrKlangFileFactory.Release(System.String)">
            <summary>
            Provide error free call to Release on Stream
            </summary>
            <param name="FileName">Name of the file, also key in dictionary</param>
        </member>
        <member name="M:ORTS.WAVIrrKlangFileFactory.ReleaseWithJump(System.String)">
            <summary>
            Provide error free call to ReleaseWithJump on Stream
            </summary>
            <param name="FileName">Name of the file, also key in dictionary</param>
        </member>
        <member name="T:ORTS.WAVFileStream">
            <summary>
            File Stream implementation to provide CUE markers and looping functionality
            </summary>
        </member>
        <member name="M:ORTS.WAVFileStream.#ctor(System.String)">
            <summary>
            Contructor, resets loop information, also calls base constructor
            </summary>
            <param name="filename">Name of the file to be streamed</param>
        </member>
        <member name="M:ORTS.WAVFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overriden Read, it handles basic info reading, also emulate loop
            </summary>
            <param name="array">Where to read bytes</param>
            <param name="offset">Offset in array</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:ORTS.WAVFileStream.StartLoop">
            <summary>
            Sets loop begin, between markers
            </summary>
        </member>
        <member name="M:ORTS.WAVFileStream.Release">
            <summary>
            Set loop end, between markers
            </summary>
        </member>
        <member name="M:ORTS.WAVFileStream.ReleaseWithJump">
            <summary>
            Set loop end, between marker and end of file
            </summary>
        </member>
        <member name="M:ORTS.WAVFileStream.FromArray(System.Byte[])">
            <summary>
            Gets long from array of bytes
            </summary>
            <param name="array">byte array</param>
            <returns>The converted long</returns>
        </member>
        <member name="M:ORTS.WAVFileStream.FromReadArray(System.Int32)">
            <summary>
            Tries to read long from file
            </summary>
            <param name="len">Length of the long</param>
            <returns></returns>
        </member>
        <member name="M:ORTS.WAVFileStream.FindCUE">
            <summary>
            Finds CUE points, read the information
            </summary>
        </member>
        <member name="P:ORTS.WAVFileStream.LoopedLength">
            <summary>
            Gets looped length
            </summary>
        </member>
        <member name="P:ORTS.WAVFileStream.IsInternalLoop">
            <summary>
            Indicates if the Stream is in internal - between markers - loop
            </summary>
        </member>
        <member name="P:ORTS.WAVFileStream.BeginPosition">
            <summary>
            Gets the begin position in file, absolute or marker
            </summary>
        </member>
        <member name="P:ORTS.WAVFileStream.LoopedEndPosition">
            <summary>
            Gets the end position, marker or the absolute end
            </summary>
        </member>
        <member name="T:ORTS.CUE">
            <summary>
            Representing a CUE
            </summary>
        </member>
        <member name="T:ORTS.ProcessState">
            <summary>
            Provides interprocess signalling.
            Manages a process as finished, or started
            with thread blocking calls to wait for the desired state
            without spin poll wait loops
            </summary>
        </member>
        <member name="M:ORTS.ProcessState.#ctor">
            <summary>
            Initializes a process state object to 
            finished state.
            </summary>
        </member>
        <member name="T:ORTS.WorldPosition">
            <summary>
            Represents the position and orientation of an object
            including what tile, and the matrix within the tile
            </summary>
        </member>
        <member name="M:ORTS.WorldPosition.Normalize">
            <summary>
            Ensure tile coordinates are within tile boundaries
            </summary>
        </member>
        <member name="M:ORTS.WorldLocation.Normalize">
            <summary>
            Ensure tile coordinates are within tile boundaries
            </summary>
        </member>
        <member name="M:ORTS.TrackAuthority.CalcStopDistance">
            <summary>
            Computes the StopDistanceM value, i.e. the distance from one end of the train to the StopNode.
            </summary>
        </member>
        <member name="M:ORTS.TrackAuthority.AdvanceStopNode(System.Boolean)">
            <summary>
            Moves the StopNode to the next path node the train should stop at.
            </summary>
        </member>
        <member name="T:MSTS.CONFile">
            <summary>
            Work with consist files
            </summary>
        </member>
        <member name="T:MSTS.ACTFile">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:MSTS.EventCategoryLocation.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Create a new 'ActivitySuccess' LocationEvent
            </summary>
        </member>
        <member name="M:MSTS.EventCategoryAction.#ctor(System.Int32)">
            <summary>
            Build a default EventTypeAllStops event
            </summary>
        </member>
        <member name="M:ORTS.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:ORTS.Program.Start(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            Run the specified activity from the beginning.
            </summary>
        </member>
        <member name="M:ORTS.Program.Save">
            <summary>
            Save the current game state for later resume.
            Currently only supports one save, in a SAVE.BIN file in 
            the users local program storage, 
            ie.  "C:\\Users\\Wayne\\AppData\\Roaming\\ORTS\\SAVE.BIN"
            </summary>
        </member>
        <member name="M:ORTS.Program.Resume(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Resume a saved game.
            </summary>
        </member>
        <member name="M:ORTS.Program.IsWarningsOn">
            <summary>
            Check the registry and return true if the OpenRailsLog.TXT
            file should be created.
            </summary>
        </member>
        <member name="M:ORTS.Program.EnableLogging">
            <summary>
            Set up to capture all console and error I/O into a  log file.
            </summary>
        </member>
        <member name="M:ORTS.Program.SetBuildRevision">
            <summary>
            Set up the global Build and Revision variables
            from assembly data and the revision.txt file.
            </summary>
        </member>
        <member name="T:ORTS.Program.Testing">
            <summary>
            This class is for programmer's use in setting up adhoc tests.
            </summary>
        </member>
        <member name="M:ORTS.Program.Testing.GetRandomActivity">
            <summary>
            For testing purposes, select a random activity from the available routes.
            </summary>
        </member>
        <member name="M:ORTS.Program.Testing.Test">
            <summary>
            Adhoc testing for programmers
            </summary>
        </member>
        <member name="M:ORTS.Program.Testing.TestAll">
            <summary>
            Test all files in all MSTS folders 
            used by the development team for adhoc testing - customize this for whatever you need
            </summary>
        </member>
        <member name="T:ORTS.MSTSDieselLocomotive">
            <summary>
            Adds physics and control for a diesel locomotive
            </summary>
        </member>
        <member name="M:ORTS.MSTSDieselLocomotive.Parse(System.String,MSTS.STFReader)">
            <summary>
            Parse the wag file parameters required for the simulator and viewer classes
            </summary>
        </member>
        <member name="M:ORTS.MSTSDieselLocomotive.InitializeFromCopy(ORTS.MSTSWagon)">
            <summary>
            This initializer is called when we are making a new copy of a car already
            loaded in memory.  We use this one to speed up loading by eliminating the
            need to parse the wag file multiple times.
            NOTE:  you must initialize all the same variables as you parsed above
            </summary>
        </member>
        <member name="M:ORTS.MSTSDieselLocomotive.Save(System.IO.BinaryWriter)">
            <summary>
            We are saving the game.  Save anything that we'll need to restore the 
            status later.
            </summary>
        </member>
        <member name="M:ORTS.MSTSDieselLocomotive.Restore(System.IO.BinaryReader)">
            <summary>
            We are restoring a saved game.  The TrainCar class has already
            been initialized.   Restore the game state.
            </summary>
        </member>
        <member name="M:ORTS.MSTSDieselLocomotive.GetViewer(ORTS.Viewer3D)">
            <summary>
            Create a viewer for this locomotive.   Viewers are only attached
            while the locomotive is in viewing range.
            </summary>
        </member>
        <member name="M:ORTS.MSTSDieselLocomotive.Update(System.Single)">
            <summary>
            This is a periodic update to calculate physics 
            parameters and update the base class's MotiveForceN 
            and FrictionForceN values based on throttle settings
            etc for the locomotive.
            </summary>
        </member>
        <member name="M:ORTS.MSTSDieselLocomotive.SignalEvent(ORTS.EventID)">
            <summary>
            Used when someone want to notify us of an event
            </summary>
        </member>
        <member name="T:ORTS.MSTSDieselLocomotiveViewer">
            <summary>
            Adds any special Diesel loco animation to the basic LocomotiveViewer class
            </summary>
        </member>
        <member name="M:ORTS.MSTSDieselLocomotiveViewer.HandleUserInput(ORTS.ElapsedTime)">
            <summary>
            A keyboard or mouse click has occured. Read the UserInput
            structure to determine what was pressed.
            </summary>
        </member>
        <member name="M:ORTS.MSTSDieselLocomotiveViewer.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            We are about to display a video frame.  Calculate positions for 
            animated objects, and add their primitives to the RenderFrame list.
            </summary>
        </member>
        <member name="M:ORTS.MSTSDieselLocomotiveViewer.Unload">
            <summary>
            This doesn't function yet.
            </summary>
        </member>
        <member name="T:ORTS.Interpolator">
            <summary>
            Interpolated table lookup
            Supports linear or cubic spline interpolation
            </summary>
        </member>
        <member name="T:ORTS.Interpolator2D">
            <summary>
            two dimensional Interpolated table lookup
            </summary>
        </member>
        <member name="M:ORTS.Train.SignalEvent(ORTS.EventID)">
            <summary>
            Someone is sending an event notification to all cars on this train.
            ie doors open, pantograph up, lights on etc.
            </summary>
        </member>
        <member name="M:ORTS.Train.IsEndOfRoute(ORTS.Direction)">
            <summary>
            Returns true if (forward == 1) and front of train on TrEndNode
            or if (forward == 0) and rear of train on TrEndNode.
            </summary>
        </member>
        <member name="M:ORTS.Train.Stop">
            <summary>
            Stops the train ASAP
            </summary>
        </member>
        <member name="M:ORTS.Train.RepositionRearTraveller">
            <summary>
            Cars have been added to the rear of the train, recalc the rearTDBtraveller
            </summary>
            <param name="distance"></param>
        </member>
        <member name="M:ORTS.Train.CalculatePositionOfCars(System.Single)">
            <summary>
            Distance is the signed distance the cars are moving.
            </summary>
            <param name="distance"></param>
        </member>
        <member name="M:ORTS.AITrain.AIUpdate(System.Single,System.Double)">
            <summary>
            Update function for a single AI train.
            Performs stop processing if a planned stop is made.
            Then moves the train, calculates target accelleration and adjusts the controls.
            </summary>
        </member>
        <member name="M:ORTS.AITrain.CalcNextStopDistance(System.Double)">
            <summary>
            Computes the NextStopDistanceM value, i.e. the distance from one end of the train to the NextStopNode.
            Returns false and performs the NextStopNode action if its past the train end.
            Also checks for possible coupling and sets CoupleOnNextStop and adjusts the distance if any.
            </summary>
        </member>
        <member name="M:ORTS.AITrain.FindStopNode(ORTS.AIPathNode,System.Single)">
            <summary>
            Finds the next path node the train should stop at.
            </summary>
        </member>
        <member name="M:ORTS.AITrain.FindPrevNode(ORTS.AIPathNode)">
            <summary>
            Finds the path node before target.
            </summary>
        </member>
        <member name="M:ORTS.AITrain.HandleNodeAction(ORTS.AIPathNode,System.Double)">
            <summary>
            Performs any special processing based on the type of node.
            Returns true if an action was performed.
            </summary>
        </member>
        <member name="M:ORTS.AITrain.Uncouple(System.Int32)">
            <summary>
            Uncouples cars from the AI train and keeps the specified number of cars.
            If nCars is negative, -nCars are counted from the rear and the rear is kept.
            If nCars if zero, the entire train is uncoupled and the AI train will be deleted.
            Returns true if an action was performed.
            </summary>
        </member>
        <member name="M:ORTS.AITrain.CalcAccelMpSS">
            <summary>
            Calculated the desired acceleration given the distance to the next stop.
            </summary>
        </member>
        <member name="M:ORTS.AITrain.AdjustControls(System.Single,System.Single,System.Single)">
            <summary>
            Adjusts the train's throttle and brake controls to try to achieve the
            desired acceleration.  If the desired acceleration cannot be achieved
            using the controls, it is simply added to the speed.
            Adjusting the controls is the easiest way to get sound effects etc. to work right.
            </summary>
        </member>
        <member name="T:ORTS.SoundSource">
            SOUND SOURCE
        </member>
        <member name="M:ORTS.SoundSource.#ctor(ORTS.Viewer3D,ORTS.MSTSWagon,System.String)">
            <summary>
            Construct a SoundSource attached to a train car.
            </summary>
            <param name="viewer"></param>
            <param name="car"></param>
            <param name="smsFilePath"></param>
        </member>
        <member name="M:ORTS.SoundSource.#ctor(ORTS.Viewer3D,System.String)">
            <summary>
            Initializes a SoundSource which has no specific loaction - like ingame.sms
            </summary>
            <param name="viewer"></param>
            <param name="smsFilePath"></param>
        </member>
        <member name="M:ORTS.SoundSource.#ctor(ORTS.Viewer3D,ORTS.WorldLocation,System.String)">
            <summary>
            Construct a SoundSource stationary at the specified worldLocation
            </summary>
            <param name="viewer"></param>
            <param name="worldLocation"></param>
            <param name="smsFilePath"></param>
        </member>
        <member name="M:ORTS.SoundSource.Uninitialize">
            <summary>
            No need to play the sounds, stop them
            </summary>
        </member>
        <member name="M:ORTS.SoundSource.Activate">
            <summary>
            Return true if activation conditions are met,
            ie PassengerCam, CabCam, Distance etc
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORTS.SoundSource.DeActivate">
            <summary>
            Return true if deactivation conditions are met
            ie PassengerCam, CabCam, Distance etc
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORTS.SoundSource.ConditionsMet(MSTS.Activation)">
            <summary>
            Return true of the ViewPoint matches any of the ones specified in the conditions
            for activation or deactivation.
            </summary>
            <param name="conditions"></param>
            <returns></returns>
        </member>
        <member name="T:ORTS.SoundStream">
            SOUND STREAM
        </member>
        <member name="M:ORTS.SoundStream.Update(IrrKlang.Vector3D)">
            <summary>
            Update frequency and volume relative to curves
            Position is in IRRKLANG space relative to listener
            </summary>
        </member>
        <member name="M:ORTS.SoundStream.SetFreqAndVolume">
            <summary>
            Separated Frequency and Volume calculations to prevent glitches - by GeorgeS
            </summary>
        </member>
        <member name="M:ORTS.SoundStream.Interpolate(System.Single,MSTS.CurvePoint[])">
            <summary>
            There must be at least two points in the curve
            // TODO do we need to implement support for Granularity()
            </summary>
            <param name="x"></param>
            <param name="curvePoints"></param>
            <returns></returns>
        </member>
        <member name="M:ORTS.SoundStream.ReadValue(MSTS.VolumeCurve.Controls,ORTS.MSTSWagon)">
            <summary>
            Read a variable from the car data in the simulator.
            </summary>
            <param name="control"></param>
            <param name="car"></param>
            <returns></returns>
        </member>
        <member name="M:ORTS.SoundStream.StopRepeating">
            <summary>
            Clears (already stopped) sound information - by GeorgeS
            </summary>
        </member>
        <member name="M:ORTS.SoundStream.Activate">
            <summary>
            Restore any previously playing sounds
            </summary>
        </member>
        <member name="M:ORTS.SoundStream.Deactivate">
            <summary>
            Deactivates a previously active sound
            </summary>
        </member>
        <member name="M:ORTS.SoundStream.CheckSoundQueue">
            <summary>
            Check the playable sound queue. If the previous stopped and available a next sound
            it begins to play. Timed solution!
            </summary>
        </member>
        <member name="M:ORTS.SoundStream.Play3D(System.Boolean,IrrKlang.ISoundSource)">
            <summary>
            Play the specified sound 
            at the default volume.
            </summary>
            <param name="repeat"></param>
            <param name="iSoundSource"></param>
        </member>
        <member name="T:ORTS.ORTSTrigger">
            SOUND TRIGGERS
        </member>
        <member name="T:ORTS.ORTSDiscreteTrigger">
            <summary>
            Play this sound when a discrete TrainCar event occurs in the simulator
            </summary>
        </member>
        <member name="T:ORTS.ORTSDistanceTravelledTrigger">
            <summary>
            Play this sound controlled by the distance a TrainCar has travelled
            </summary>
        </member>
        <member name="T:ORTS.ORTSInitialTrigger">
            <summary>
            Play this sound immediately when this SoundSource becomes active
            </summary>
        </member>
        <member name="T:ORTS.ORTSRandomTrigger">
            <summary>
            Play the sound at random times
            </summary>
        </member>
        <member name="T:ORTS.ORTSDistanceTrigger">
            <summary>
            Control sounds based on TrainCar variables in the simulator 
            </summary>
        </member>
        <member name="T:ORTS.ORTSVariableTrigger">
            <summary>
            Control sounds based on TrainCar variables in the simulator 
            </summary>
        </member>
        <member name="T:ORTS.ORTSPlayOneShot">
            <summary>
            Play a sound file once.
            </summary>
        </member>
        <member name="T:ORTS.ORTSSoundPlayCommand">
            <summary>
            A base class for commands that play a sound.
            Provides for selecting the sound from multiple files
            using a random or sequential selection strategy.
            </summary>
        </member>
        <member name="T:ORTS.ORTSSoundCommand">
            <summary>
            A base class for all sound commands
            Defines that they all have a stream and a 'run()' function
            </summary>
        </member>
        <member name="M:ORTS.ORTSSoundCommand.FromMSTS(MSTS.SoundCommand,ORTS.SoundStream)">
            <summary>
            Create a sound command based on the sound command variable in an SMS file.
            </summary>
            <param name="mstsSoundCommand"></param>
            <param name="soundStream"></param>
            <returns></returns>
        </member>
        <member name="T:ORTS.ORTSStartLoop">
            <summary>
            Start a repeating sound
            </summary>
        </member>
        <member name="T:ORTS.ORTSReleaseLoopRelease">
            <summary>
            Stop a repeating sound.
            </summary>
        </member>
        <member name="T:ORTS.ORTSStartLoopRelease">
            <summary>
            Start a looping sound that uses repeat markers
            TODO - until we implement markers, this will start the sound as a simple one shot
            </summary>
        </member>
        <member name="T:ORTS.ORTSReleaseLoopReleaseWithJump">
            <summary>
            Jump to the exit portion of a looping sound with repeat markers   
            </summary>
        </member>
        <member name="T:ORTS.ORTSDisableTrigger">
            <summary>
            Shut down this stream trigger 
            </summary>
        </member>
        <member name="T:ORTS.ORTSEnableTrigger">
            <summary>
            Re-enable this stream trigger
            </summary>
        </member>
        <member name="T:ORTS.ORTSSetStreamVolume">
            <summary>
            Set Volume Command
            </summary>
        </member>
        <member name="T:ORTS.ORTSNoOp">
            <summary>
            Used when the SMS file sound command is missing or malformed
            </summary>
        </member>
        <member name="M:ORTS.WorldSounds.WorldFileNameFromTileCoordinates(System.Int32,System.Int32)">
            <summary>
            Build a w filename from tile X and Z coordinates.
            Returns a string eg "w-011283+014482.w"
            </summary>
        </member>
        <member name="M:ORTS.WorldSounds.FormatTileCoordinate(System.Int32)">
            <summary>
            For building a filename from tile X and Z coordinates.
            Returns the string representation of a coordinate
            eg "+014482"
            </summary>
        </member>
        <member name="M:ORTS.SkyDrawer.#ctor(ORTS.Viewer3D)">
            <summary>
            SkyDrawer constructor
            </summary>
        </member>
        <member name="M:ORTS.SkyDrawer.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            Used to update information affecting the SkyMesh
            </summary>
        </member>
        <member name="M:ORTS.SkyMesh.#ctor(ORTS.RenderProcess)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ORTS.SkyMesh.DomeVertexList(System.Int32,System.Int32,System.Single)">
            <summary>
            Creates the vertex list for each sky dome.
            </summary>
            <param name="index">The starting vertex number</param>
            <param name="radius">The radius of the dome</param>
            <param name="oblate">The amount the dome is flattened</param>
        </member>
        <member name="M:ORTS.SkyMesh.DomeTriangleList(System.Int16,System.Int16)">
            <summary>
            Creates the triangle index list for each dome.
            </summary>
            <param name="index">The starting triangle index number</param>
            <param name="pass">A multiplier used to arrive at the starting vertex number</param>
        </member>
        <member name="M:ORTS.SkyMesh.MoonLists(System.Int32,System.Int32)">
            <summary>
            Creates the moon vertex and triangle index lists.
            <param name="vertexIndex">The starting vertex number</param>
            <param name="iIndex">The starting triangle index number</param>
            </summary>
        </member>
        <member name="M:ORTS.SkyMesh.InitializeVertexBuffers(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes the sky dome, cloud dome and moon vertex and triangle index list buffers.
            </summary>
        </member>
        <member name="T:ORTS.PrecipDrawer">
            <summary>
            Precipitation render primitive
            Adapted from code by Jan Vytlačil.
            </summary>
        </member>
        <member name="M:ORTS.PrecipDrawer.#ctor(ORTS.Viewer3D)">
            <summary>
            PrecipDrawer constructor
            </summary>
        </member>
        <member name="M:ORTS.PrecipDrawer.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            Used to update information affecting the precipitation particles
            </summary>
        </member>
        <member name="M:ORTS.PrecipDrawer.Reset">
            <summary>
            Reset the particle array upon any event that inerrupts or alters the time clock.
            </summary>
        </member>
        <member name="M:ORTS.PrecipMesh.#ctor(ORTS.RenderProcess)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:ORTS.PrecipMesh.VertexPointSprite">
            <summary>
            Custom precipitation sprite vertex format.
            </summary>
        </member>
        <member name="M:ORTS.PrecipMesh.VertexPointSprite.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Precipitaiton vertex constructor.
            </summary>
            <param name="position">particle position</param>
            <param name="pointSize">particle size</param>
            <param name="time">time of particle initialization</param>
            <param name="wind">wind direction</param>
        </member>
        <member name="T:ORTS.InfoDisplay">
            <summary>
            Displays Viewer frame rate and Viewer.Text debug messages in the upper left corner of the screen.
            </summary>
        </member>
        <member name="M:ORTS.InfoDisplay.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            Allows the game component to update itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:ORTS.TextPrimitive.Draw(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This is called when the game should draw itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:ORTS.TimeTable.#ctor(ORTS.Dispatcher)">
            <summary>
            Processes AI train paths in priority order to construct a feasible timetable.
            </summary>
        </member>
        <member name="M:ORTS.TimeTable.CalcTrackTimes(System.Double,System.Double,ORTS.AIPathNode,ORTS.TTTrainTimes,System.Int32)">
            <summary>
            Recursive function that tries to built a list of times for a train that does not overlap any trains already in the timetable.
            Returns the number of seconds the train needs to wait at a previous node.
            </summary>
        </member>
        <member name="M:ORTS.TimeTable.CanAdd(ORTS.TTTrainTimes)">
            <summary>
            Returns true if a new train can be added to the timetable without overlapping an existing train.
            </summary>
        </member>
        <member name="M:ORTS.TimeTable.Add(ORTS.TTTrainTimes)">
            <summary>
            Adds a train to the timetable if possible.
            </summary>
        </member>
        <member name="M:ORTS.TimeTable.TestAdd(System.Int32,System.Double,System.Double)">
            <summary>
            Returns true if the specified track and time interval can be added to the timetable without overlapping an existing train.
            </summary>
        </member>
        <member name="T:ORTS.TTTrainTimes">
            <summary>
            Class used to store timetable times for a single train.
            Times are saved by track node index.
            </summary>
        </member>
        <member name="M:ORTS.TTTrainTimes.Add(System.Int32,System.Double,System.Double)">
            <summary>
            Adds an entry for the specified track node.
            </summary>
        </member>
        <member name="M:ORTS.TTTrainTimes.Overlap(ORTS.TTTrainTimes)">
            <summary>
            Returns true if any of two trains's time intervals overlap.
            </summary>
        </member>
        <member name="T:ORTS.TimeTableTime">
            <summary>
            Struct to store and compare timetable time intervals.
            </summary>
        </member>
        <member name="M:ORTS.TimeTableTime.Overlap(ORTS.TimeTableTime)">
            <summary>
            Returns true if two time intervals overlap.
            </summary>
        </member>
        <member name="T:ORTS.SceneryShader">
            <summary>
            Wrapper for SceneryShader.fx
            </summary>
        </member>
        <member name="T:ORTS.ShadowMapShader">
            <summary>
            Wrapper for ShadowMap.fx
            </summary>
        </member>
        <member name="T:ORTS.PopupWindowShader">
            <summary>
            Wrapper for PopupWindow.fx
            </summary>
        </member>
        <member name="T:ORTS.CabShader">
            <summary>
            Wrapper for CabShader.fx
            </summary>
        </member>
        <member name="T:ORTS.IBrakeController">
            This is the interface for a controller that can be used as a BrakeController.
            
        </member>
        <member name="T:ORTS.IController">
            This interface is used to specify how controls will work.
            
            We have a class for implementing each type of controller that locomotives use, being the commons
            the Notched and not Notched controller.          
            
        </member>
        <member name="M:ORTS.Heap`1.GetMinKey">
            <summary>
            Returns the smallest key in the heap.
            </summary>
        </member>
        <member name="M:ORTS.Heap`1.GetMinValue">
            <summary>
            Returns the value that corresponds to the smallest key.
            </summary>
        </member>
        <member name="M:ORTS.Heap`1.Add(System.Double,`0)">
            <summary>
            Adds a new heap entry with the given key and value.
            The entry is added to the end of the list and then sifted up.
            </summary>
        </member>
        <member name="M:ORTS.Heap`1.DeleteMin">
            <summary>
            Removes the entry with the smallest key value and returns it.
            The last entry is moved to the front and then sifted down.
            </summary>
        </member>
        <member name="T:ORTS.RenderProcess">
            <summary>
            This is the main type for your game
            </summary>
        </member>
        <member name="M:ORTS.RenderProcess.Initialize">
            <summary>
            Allows the game to perform any initialization it needs after the graphics device has started
            </summary>
        </member>
        <member name="M:ORTS.RenderProcess.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called regularly.   Used to update the simulator class when
            the window is minimized.
            </summary>
        </member>
        <member name="F:ORTS.RenderProcess.ProfileFrames">
            <summary>
            This is called once per frame when the game should draw itself.
            In a multiprocessor environement, it starts the background UpdateProcessor
            task preparing the next frame, while it renders this frame.
            In a single processor environment, it does the update/draw in
            sequence using this thread alone.
            </summary>
        </member>
        <member name="M:ORTS.RenderProcess.Stop">
            <summary>
            This signal is caught in the Update
            </summary>
        </member>
        <member name="M:ORTS.RenderProcess.Terminate">
            <summary>
            Shut down other processes and unload content
            </summary>
        </member>
        <member name="M:ORTS.RenderProcess.OnExiting(System.Object,System.EventArgs)">
            <summary>
            User closed the window without pressing the exit key
            </summary>
        </member>
        <member name="T:ORTS.MSTSNotchController">
            This is the most used contorller. The main use if for diesel locomotives Throttle control.
            
            It is used with single keypress, this means that when the user press a key, only the keydown event is handled.
            The user need to press the key multiple times to update this controller.
            
        </member>
        <member name="M:ORTS.Dispatcher.#ctor(ORTS.AI)">
            <summary>
            Initializes the dispatcher.
            Creates an array for saving track node reservations and initializes it to no reservations.
            </summary>
        </member>
        <member name="M:ORTS.Dispatcher.Update(System.Double,System.Single)">
            <summary>
            Updates dispatcher information.
            Moves each train's rear path node forward and updates reservations.
            </summary>
        </member>
        <member name="M:ORTS.Dispatcher.RequestAuth(ORTS.AITrain,System.Boolean)">
            <summary>
            Requests movement authorization for the specified train.
            Follows the train's path from the current rear node until the path ends
            or a SidingEnd node is found.  Grants authorization if all of the track
            vector nodes can be reserved for the train.
            If a SidingStart node is found, the main track and siding are tested separately.
            Returns true if an authorization was granted, else false.
            The authorization is specified using the SetAuthorization method.
            </summary>
        </member>
        <member name="M:ORTS.Dispatcher.SetAuthorization(ORTS.TrackAuthority,ORTS.AIPathNode,ORTS.AIPathNode,System.Int32)">
            <summary>
            end is the path node the train is allowed to move just short of.
            if siding is not null the train should enter the siding at the specified node.
            The dispatcher might change the authorization while a train is moving.
            </summary>
        </member>
        <member name="M:ORTS.Dispatcher.CanReserve(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Checks to see is the listed track nodes can be reserved for the specified train.
            return true if none of the nodes are already reserved for another train.
            </summary>
        </member>
        <member name="M:ORTS.Dispatcher.Reserve(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Reserves the listed track nodes for the specified train.
            </summary>
        </member>
        <member name="M:ORTS.Dispatcher.Unreserve(System.Int32)">
            <summary>
            Clears any existing Reservations for the specified train.
            </summary>
        </member>
        <member name="M:ORTS.Dispatcher.Release(ORTS.AITrain)">
            <summary>
            Releases the specified train's movement authorization.
            </summary>
        </member>
        <member name="M:ORTS.Dispatcher.Rereserve(ORTS.TrackAuthority)">
            <summary>
            Releases the specified train's movement authorization.
            </summary>
        </member>
        <member name="M:ORTS.Dispatcher.FindDoubleTrack">
            <summary>
            Scans all AI paths to identify double track passing possibilities.
            Changes the path node type to SidingEnd if its the end of double track.
            </summary>
        </member>
        <member name="M:ORTS.Dispatcher.CalcTrackLength">
            <summary>
            Calculates the length of all track vector nodes and saves it in the TrackLength array.
            This should probably be moved elsewhere if others need this information.
            </summary>
        </member>
        <member name="M:MSTS.SignalType.def_draw_state(ORTS.SignalHead.SIGASP)">
            <summary>
            This method returns the default draw state for the specified aspect or -1 if none.
            </summary>
        </member>
        <member name="M:MSTS.SignalType.GetNextLeastRestrictiveState(ORTS.SignalHead.SIGASP)">
            <summary>
            This method returns the next least restrictive aspect from the one specified.
            </summary>
        </member>
        <member name="M:MSTS.SignalType.GetMostRestrictiveAspect">
            <summary>
            This method returns the most restrictive aspect for this signal type.
            </summary>
        </member>
        <member name="M:ORTS.StaticShape.#ctor(ORTS.Viewer3D,System.String,ORTS.WorldPosition,ORTS.ShapeFlags)">
            <summary>
            Construct and initialize the class
            This constructor is for objects described by a MSTS shape file
            </summary>
        </member>
        <member name="T:ORTS.PoseableShape">
            <summary>
            Has a heirarchy of objects that can be moved by adjusting the XNAMatrices
            at each node.
            </summary>
        </member>
        <member name="M:ORTS.PoseableShape.#ctor(ORTS.Viewer3D,System.String,ORTS.WorldPosition,ORTS.ShapeFlags)">
            <summary>
            Construct and initialize the class
            </summary>
        </member>
        <member name="M:ORTS.PoseableShape.AnimateMatrix(System.Int32,System.Single)">
            <summary>
            Adjust the pose of the specified node to the frame position specifed by key.
            </summary>
            <param name="initialPose"></param>
            <param name="anim_node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ORTS.AnimatedShape">
            <summary>
            An animated shape has a continuous repeating motion defined
            in the animations of the shape file.
            </summary>
        </member>
        <member name="M:ORTS.AnimatedShape.#ctor(ORTS.Viewer3D,System.String,ORTS.WorldPosition,ORTS.ShapeFlags)">
            <summary>
            Construct and initialize the class
            </summary>
        </member>
        <member name="T:ORTS.SharedShapeManager">
            <summary>
            Conserves memory by sharing the basic shape data with multiple instances in the scene.
            </summary>
        </member>
        <member name="M:ORTS.ShapePrimitive.Draw(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This is called when the game should draw itself.
            Executes in RenderProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.SharedShape.#ctor(ORTS.Viewer3D)">
            <summary>
            Create an empty shape used as a sub when the shape won't load
            </summary>
            <param name="viewer"></param>
        </member>
        <member name="M:ORTS.SharedShape.#ctor(ORTS.Viewer3D,System.String)">
            <summary>
            MSTS shape from shape file
            </summary>
            <param name="viewer"></param>
            <param name="path">Path to shape's S file</param>
        </member>
        <member name="M:ORTS.SharedShape.LoadContent(System.String)">
            <summary>
            Only one copy of the model is loaded regardless of how many copies are placed in the scene.
            </summary>
        </member>
        <member name="M:ORTS.SharedShape.PrepareFrame(ORTS.RenderFrame,ORTS.WorldPosition,ORTS.ShapeFlags)">
            <summary>
            This is called by the individual instances of the shape when it should draw itself at the specified location
            </summary>
        </member>
        <member name="M:ORTS.SharedShape.PrepareFrame(ORTS.RenderFrame,ORTS.WorldPosition,Microsoft.Xna.Framework.Matrix[],ORTS.ShapeFlags)">
            <summary>
            This is called by the individual instances of the shape when it should draw itself at the specified location
            with individual matrices animated as shown.
            </summary>
        </member>
        <member name="T:ORTS.WireDrawer">
            <summary>
            Created by a Viewer
            </summary>
        </member>
        <member name="M:ORTS.WireDrawer.#ctor(ORTS.Viewer3D)">
            <summary>
            Called once after the graphics device is ready
            to load any static graphics content, background 
            processes haven't started yet.
            Executes in the RenderProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.WireDrawer.LoadPrep">
            <summary>
            Called 10 times per second when its safe to read volatile data
            from the simulator and viewer classes in preparation
            for the Load call.  Copy data to local storage for use 
            in the next load call.
            Executes in the UpdaterProcess thread.
            </summary>
        </member>
        <member name="M:ORTS.WireDrawer.Load(ORTS.RenderProcess)">
            <summary>
            Called 10 times a second to load graphics content
            that comes and goes as the player and trains move.
            Called from background LoaderProcess Thread
            Do not access volatile data from the simulator 
            and viewer classes during the Load call ( see
            LoadPrep() )
            Executes in the LoaderProcess thread.
            Do not read volatile data managed by the UpdaterProcess
            </summary>
        </member>
        <member name="M:ORTS.WireDrawer.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            Called every frame to update animations and load the frame contents .
            Note:  this doesn't actually draw on the screen surface, but 
            instead prepares a list of drawing primitives that will be rendered
            later in RenderFrame.Draw() by the RenderProcess thread.
            elapsedTime represents the the time since the last call to PrepareFrame
            Executes in the UpdaterProcess thread.
            </summary>
        </member>
        <member name="T:ORTS.WireMaterial">
            <summary>
            This encapsulates any shaders, sprites, etc needed by the material.
            </summary>
        </member>
        <member name="M:ORTS.WireMaterial.Render(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Collections.Generic.List{ORTS.RenderItem},Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Called by RenderFrame.Draw() in the RenderProcess thread for each primitive
            that was loaded by PrepareFrame
            </summary>
        </member>
        <member name="M:ORTS.WirePrimitive.Draw(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This is when the object actually renders itself onto the screen.
            Do not reference any volatile data.
            Executes in the RenderProcess thread called from the Render method of the material class
            </summary>
            <param name="graphicsDevice"></param>
        </member>
        <member name="T:ORTS.MSTSElectricLocomotive">
            <summary>
            Adds pantograph control to the basic LocomotiveSimulator functionality
            </summary>
        </member>
        <member name="M:ORTS.MSTSElectricLocomotive.Parse(System.String,MSTS.STFReader)">
            <summary>
            Parse the wag file parameters required for the simulator and viewer classes
            </summary>
        </member>
        <member name="M:ORTS.MSTSElectricLocomotive.InitializeFromCopy(ORTS.MSTSWagon)">
            <summary>
            This initializer is called when we are making a new copy of a car already
            loaded in memory.  We use this one to speed up loading by eliminating the
            need to parse the wag file multiple times.
            NOTE:  you must initialize all the same variables as you parsed above
            </summary>
        </member>
        <member name="M:ORTS.MSTSElectricLocomotive.Save(System.IO.BinaryWriter)">
            <summary>
            We are saving the game.  Save anything that we'll need to restore the 
            status later.
            </summary>
        </member>
        <member name="M:ORTS.MSTSElectricLocomotive.Restore(System.IO.BinaryReader)">
            <summary>
            We are restoring a saved game.  The TrainCar class has already
            been initialized.   Restore the game state.
            </summary>
        </member>
        <member name="M:ORTS.MSTSElectricLocomotive.GetViewer(ORTS.Viewer3D)">
            <summary>
            Create a viewer for this locomotive.   Viewers are only attached
            while the locomotive is in viewing range.
            </summary>
        </member>
        <member name="M:ORTS.MSTSElectricLocomotive.Update(System.Single)">
            <summary>
            This is a periodic update to calculate physics 
            parameters and update the base class's MotiveForceN 
            and FrictionForceN values based on throttle settings
            etc for the locomotive.
            </summary>
        </member>
        <member name="M:ORTS.MSTSElectricLocomotive.SignalEvent(ORTS.EventID)">
            <summary>
            Used when someone want to notify us of an event
            </summary>
        </member>
        <member name="T:ORTS.MSTSElectricLocomotiveViewer">
            <summary>
            Adds pantograph animation to the basic LocomotiveViewer class
            </summary>
        </member>
        <member name="M:ORTS.MSTSElectricLocomotiveViewer.HandleUserInput(ORTS.ElapsedTime)">
            <summary>
            A keyboard or mouse click has occured. Read the UserInput
            structure to determine what was pressed.
            </summary>
        </member>
        <member name="M:ORTS.MSTSElectricLocomotiveViewer.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            We are about to display a video frame.  Calculate positions for 
            animated objects, and add their primitives to the RenderFrame list.
            </summary>
        </member>
        <member name="M:ORTS.MSTSElectricLocomotiveViewer.Unload">
            <summary>
            This doesn't function yet.
            </summary>
        </member>
        <member name="M:ORTS.Simulator.InitialPlayerLocomotive">
            <summary>
            Which locomotive does the activity specify for the player.
            </summary>
        </member>
        <member name="M:ORTS.Simulator.GetElapsedClockSeconds(System.Single)">
            <summary>
            Convert and elapsed real time into clock time based on simulator
            running speed and paused state.
            </summary>
            <param name="elapsedRealTimeSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:ORTS.Simulator.Update(System.Single)">
            <summary>
            Update the simulator state 
            elapsedClockSeconds represents the the time since the last call to Simulator.Update
            Executes in the UpdaterProcess thread.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:ORTS.Simulator.CheckForCoupling(ORTS.Train,System.Single)">
            <summary>
            Scan other trains
            </summary>
            <param name="train"></param>
        </member>
        <member name="M:ORTS.Simulator.AlignTrailingPointSwitches(ORTS.Train,System.Boolean)">
            <summary>
            Sets the trailing point switches ahead of the train
            </summary>
            <param name="train"></param>
        </member>
        <member name="M:ORTS.Simulator.AlignSwitchesToDefault">
            <summary>
            The TSECTION.DAT specifies which path through a switch is considered the main route
            For most switches the main route is the straight-through route, vs taking the curved branch
            All the switch tracks in a route are stored in the TDB 
            This method scans the route's TDB, aligning each switch to the main route.
            </summary>
        </member>
        <member name="M:ORTS.Simulator.SwitchTrackBehind(ORTS.Train)">
            <summary>
            Align the switchtrack behind the players train to the opposite position
            </summary>
        </member>
        <member name="M:ORTS.Simulator.SwitchTrackAhead(ORTS.Train)">
            <summary>
            Align the switchtrack ahead of the players train to the opposite position
            </summary>
        </member>
        <member name="M:ORTS.Simulator.InitializeStaticConsists">
            <summary>
            Set up trains based on info in the static consists listed in the activity file.
            </summary>
        </member>
        <member name="M:ORTS.Simulator.XNAMatrixFromMSTSCoordinates(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            The front end of a railcar is at MSTS world coordinates x1,y1,z1
            The other end is at x2,y2,z2
            Return a rotation and translation matrix for the center of the railcar.
            </summary>
        </member>
        <member name="T:ORTS.Tiles">
            <summary>
            Encapsulates the Tiles folder
            </summary>
        </member>
        <member name="T:ORTS.TileBuffer">
            <summary>
            This class speeds up access to tiles by caching the ones in the vicinity of 
            the most recently used tiles.
            </summary>
        </member>
        <member name="M:ORTS.TileBuffer.#ctor(System.String)">
            <summary>
            Create the buffer
            </summary>
            <param name="tileFolderNameSlash"></param>
        </member>
        <member name="M:ORTS.TileBuffer.GetTile(System.Int32,System.Int32)">
            <summary>
            Get a tile from the buffer at X,Z
            Returns null if their is not tile 
            at the specified coordinates.
            </summary>
            <param name="tileX"></param>
            <param name="tileZ"></param>
            <returns></returns>
        </member>
        <member name="M:ORTS.TileBuffer.GetBuffer(System.Int32,System.Int32)">
            <summary>
            Get the raw buffer contents at the specified coordinates
            Returns null if the tile hasn't been read yet.
            </summary>
            <param name="tileX"></param>
            <param name="tileZ"></param>
            <returns></returns>
        </member>
        <member name="M:ORTS.TileBuffer.Contains(System.Int32,System.Int32)">
            <summary>
            Return true if the buffer encloses these coordinates.
            </summary>
            <param name="tileX"></param>
            <param name="tileZ"></param>
            <returns></returns>
        </member>
        <member name="M:ORTS.TileBuffer.Reposition(System.Int32,System.Int32)">
            <summary>
            Shift the buffer to enclose the specified coordinates.
            </summary>
            <param name="tileX"></param>
            <param name="tileZ"></param>
        </member>
        <member name="T:ORTS.ExtendedCVF">
            <summary>
            Extended CVF data, currently used for CAB light
            By GeorgeS
            </summary>
        </member>
        <member name="T:ORTS.ExtendedCVF.Light">
            <summary>
            Represents a Light in the CAB.
            </summary>
        </member>
        <member name="F:ORTS.ExtendedCVF.Light.Position">
            <summary>
            X,Y : Position of the light, Z : Radius, W : Aspect ratio X:Y
            </summary>
        </member>
        <member name="M:ORTS.ExtendedCVF.Light.TranslatedPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Translate to current screen resolution
            </summary>
            <param name="displaySize">Current screen resolution</param>
            <returns>Translated vectors</returns>
        </member>
        <member name="P:ORTS.ExtendedCVF.Light.TranslatedColor">
            <summary>
            Used by the shader
            </summary>
        </member>
        <member name="T:ORTS.CABTextureManager">
            <summary>
            Manages all CAB View textures - light conditions and texture parts
            </summary>
        </member>
        <member name="M:ORTS.CABTextureManager.LoadTextures(ORTS.Viewer3D,System.String)">
            <summary>
            Loads a texture, day night and cablight
            </summary>
            <param name="viewer">Viver3D</param>
            <param name="FileName">Name of the Texture</param>
        </member>
        <member name="M:ORTS.CABTextureManager.Disassemble(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32)">
            <summary>
            Disassembles a compund Texture into parts
            </summary>
            <param name="graphicsDevice">The GraphicsDevice</param>
            <param name="tex">Texture to be disassembled</param>
            <param name="width">Width of the Cab View Control</param>
            <param name="height">Height of the Cab View Control</param>
            <returns>Array with Textures disassembled</returns>
        </member>
        <member name="M:ORTS.CABTextureManager.DisassembleTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Int32,System.Int32)">
            <summary>
            Disassembles all compund textures into parts
            </summary>
            <param name="graphicsDevice">The GraphicsDevice</param>
            <param name="FileName">Name of the Texture to be disassembled</param>
            <param name="width">Width of the Cab View Control</param>
            <param name="height">Height of the Cab View Control</param>
        </member>
        <member name="M:ORTS.CABTextureManager.GetTextureByIndexes(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Returns the compound part of a Texture previously disassembled
            </summary>
            <param name="FileName">Name of the disassembled Texture</param>
            <param name="indx">Index of the part</param>
            <param name="isDark">Is dark out there?</param>
            <param name="isLight">Is Cab Light on?</param>
            <returns>The Texture represented by its index</returns>
        </member>
        <member name="M:ORTS.CABTextureManager.GetTexture(System.String,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Returns a Texture by its name
            </summary>
            <param name="FileName">Name of the Texture</param>
            <param name="isDark">Is dark out there?</param>
            <param name="isLight">Is Cab Light on?</param>
            <returns>The Texture</returns>
        </member>
        <member name="T:ORTS.CabViewControlRenderer">
            <summary>
            Base class for rendering Cab Controls
            </summary>
        </member>
        <member name="M:ORTS.CabViewControlRenderer.TranslateToPercent">
            <summary>
            Gets the requested Locomotive data and translates it into percents by Min and Max values
            </summary>
            <param name="cvc">Cab View Control</param>
            <returns>Percent of real data by Min and Max values</returns>
        </member>
        <member name="T:ORTS.CabViewDialRenderer">
            <summary>
            Dial Cab Control Renderer
            Problems with aspect ratio
            </summary>
        </member>
        <member name="T:ORTS.CabViewGaugeRenderer">
            <summary>
            Gauge type renderer
            Supports pointer, liquid, solid
            Supports Orientation and Direction
            </summary>
        </member>
        <member name="T:ORTS.CabViewDiscreteRenderer">
            <summary>
            Discrete renderer for Lever, Twostate, Tristate, Multistate, Signal
            </summary>
        </member>
        <member name="M:ORTS.CabViewDiscreteRenderer.GetDrawIndex">
            <summary>
            Determines the index of the Texture to be drawn
            </summary>
            <returns>index of the Texture</returns>
        </member>
        <member name="M:ORTS.CabViewDiscreteRenderer.FromPercent(System.Single)">
            <summary>
            Translates a percent value to a display index
            </summary>
            <param name="percent">Percent to be translated</param>
            <returns>The calculated display index by the Control's Values</returns>
        </member>
        <member name="T:ORTS.CabViewDigitalRenderer">
            <summary>
            Digital Cab Control renderer
            Uses fonts instead of graphic
            Do not supports Justification
            </summary>
        </member>
        <member name="M:ORTS.SunMoonPos.SolarAngle(System.Double,System.Double,System.Single,ORTS.SkyDrawer.Date)">
            <summary>
            Calculates the solar direction vector.
            Used for locating the sun graphic and as the location of the main scenery light source.
            </summary>
            <param name="latitude">latitude</param>
            <param name="longitude">longitude</param>
            <param name="clockTime">wall clock time since start of activity, days</param>
            <param name="date">structure made up of day, month, year and ordinal date</param>
        </member>
        <member name="M:ORTS.SunMoonPos.LunarAngle(System.Double,System.Double,System.Single,ORTS.SkyDrawer.Date)">
            <summary>
            Calculates the lunar direction vector. 
            </summary>
            <param name="latitude">latitude</param>
            <param name="longitude">longitude</param>
            <param name="clockTime">wall clock time since start of activity</param>
            <param name="date">structure made up of day, month, year and ordinal date</param>
        </member>
        <member name="M:ORTS.SunMoonPos.Normalize(System.Double,System.Double)">
            <summary>
            Removes all multiples of "divisor" from the input number.
            </summary>
            <param name="input">the raw number</param>
            <param name="divisor">the number, or its multiples, we want to remove</param> 
        </member>
        <member name="F:MSTS.TileNameConversion.wt_ew_min">
            The following code was derived from MSTSConverter
            Written by: West L. Card
            which was derived from code by  John Stanford 
            //////////////////////////////////////////////
        </member>
        <member name="M:MSTS.TileNameConversion.ComputeTileNameFromTileXZ(System.Int32,System.Int32)">
            <summary>
            ie Returns "-04e9a288"
            </summary>
            <param name="wt_ew"></param>
            <param name="wt_ns"></param>
            <returns></returns>
        </member>
        <member name="M:ORTS.TDBTraveller.MoveTo(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Advance to the specified point.  If the point isn't ahead
            along the track, return false and don't advance.
            </summary>
        </member>
        <member name="M:ORTS.TDBTraveller.DistanceTo(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Return the distance along the track to the specified point. 
            Observe the current settings for the switch tracks.
            If the point isn't located ahead along the track, then return -1;
            </summary>
        </member>
        <member name="M:ORTS.TDBTraveller.StraightSectionInit(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            If wx,wz is in this straight section, init the traveller to this location
            otherwise return false
            </summary>
            <param name="wx"></param>
            <param name="wz"></param>
            <returns></returns>
        </member>
        <member name="M:ORTS.TDBTraveller.MoveInCurvedSegment(System.Single,System.Int32,MSTS.TrackSection)">
            <summary>
            MoveInCurvedSegment attempts to move traveler through track section.
            </summary>
            <param name="distanceToGo">Target distance (>0) to move along curve.</param>
            <param name="direction">Forward (1) or reverse (0).</param>
            <param name="TS">Track section object.</param>
            <returns>Remaining distance to go.</returns>
        </member>
        <member name="M:ORTS.TDBTraveller.MSTSInterpolateAlongCurve(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            MSTSInterpolateAlongCurve interpolates position along a circular arc.
            (Uses MSTS rigid-body rotation method for curve on a grade.)
            </summary>
            <param name="vPC">Local position vector for Point-of-Curve (PC) in x-z plane.</param>
            <param name="vPC_O">Unit vector in direction from PC to arc center (O).</param>
            <param name="mRotY">Rotation matrix that deflects arc from PC to a point on curve (P).</param>
            <param name="mWorld">Transformation from local to world coordinates.</param>
            <param name="vP">Position vector for desired point on curve (P), returned by reference.</param>
            <returns>Displacement vector from PC to P in world coordinates.</returns>
        </member>
        <member name="M:ORTS.TDBTraveller.MSTSInterpolateAlongStraight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            MSTSInterpolateAlongStraight interpolates position along a straight stretch.
            </summary>
            <param name="vP0">Local position vector for starting point P0 in x-z plane.</param>
            <param name="vP0_P">Unit vector in direction from P0 to P.</param>
            <param name="offset">Distance from P0 to P.</param>
            <param name="mWorld">Transformation from local to world coordinates.</param>
            <param name="vP">Position vector for desired point(P), returned by reference.</param>
            <returns>Displacement vector from P0 to P in world coordinates.</returns>
        </member>
        <member name="M:ORTS.TDBTraveller.MoveInSegment(System.Single)">
            <summary>
            To simplify the calculations, all distances must be positive
            </summary>
            <param name="distanceToGo"></param>
            <returns></returns>
        </member>
        <member name="M:ORTS.TDBTraveller.NextSection">
            <summary>
            Advance into the next section
            which could be a TrVectorSection in a TrVectorNode, a TrJunctionNode, or a TrEndNode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORTS.TDBTraveller.NextTrVectorSection">
            <summary>
            Assume the TDBTraveller is traversing a TrVectorNode
            Advance to the next TrVectorSection or return false if there are no more sections
            in the current direction of travel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORTS.TDBTraveller.NextTrackNode">
            <summary>
            Advance the TDBTraveller into the next track node.
            which could be a TrVectorNode, a TrJunctionNode, or a TrEndNode
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORTS.TDBTraveller.OverlapDistanceM(ORTS.TDBTraveller,System.Boolean)">
            <summary>
            Returns directed distance between two train ends represented by this traveller and other traveller.
            Returns 1 if the distance is >= 1.
            Returns a positive value if the corresponding trains do not overlap and negative if they do.
            rear should be true if this traveller is the rear end of a train.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ORTS.MSTSBrakeController">
            This is the a Controller used to control brakes.
            
            This is mainly a Notch controller, but it allows continuos input and also 
            has specific methods update brake status.
            
        </member>
        <member name="M:ORTS.AIPath.#ctor(MSTS.PATFile,MSTS.TDBFile,MSTS.TSectionDatFile,System.String)">
            <summary>
            Creates an AIPath from PAT file information.
            First creates all the nodes and then links them together into a main list
            with optional parallel siding list.
            </summary>
        </member>
        <member name="M:ORTS.AIPath.AlignSwitch(System.Int32,System.Int32)">
            <summary>
            Aligns the switch for the specified juction node so that the specified
            vector node will be used as the selected route.
            </summary>
        </member>
        <member name="M:ORTS.AIPath.SwitchIsAligned(System.Int32,System.Int32)">
            <summary>
            returns true if the switch for the specified juction node is aligned
            so that the specified vector node will be used as the selected route.
            </summary>
        </member>
        <member name="M:ORTS.AIPath.RestoreSwitch(System.Int32)">
            <summary>
            aligns the specified switch to its default/main route.
            </summary>
        </member>
        <member name="M:ORTS.AIPath.TestFacingPoint(System.Int32,System.Int32)">
            <summary>
            returns true if the specified vector node is at the facing point end of
            the specified juction node, else false.
            </summary>
        </member>
        <member name="M:ORTS.AIPath.FindTrackNode(ORTS.AIPathNode,System.Int32)">
            <summary>
            finds the first path node after start that refers to the specified track node.
            </summary>
        </member>
        <member name="M:ORTS.AIPathNode.#ctor(MSTS.TrPathNode,MSTS.TrackPDP,MSTS.TrackDB)">
            <summary>
            Creates a single AIPathNode and initializes everything that do not depend on other nodes.
            The AIPath constructor will initialize the rest.
            </summary>
        </member>
        <member name="M:ORTS.AIPathNode.FindTVNIndex(ORTS.AIPathNode,MSTS.TDBFile,MSTS.TSectionDatFile)">
            <summary>
            Returns the index of the vector node connection this path node to another.
            </summary>
        </member>
        <member name="M:MSTS.TWorldDirection.RotatePoint(MSTS.TWorldPosition)">
            <summary>
            Rotate the specified point in model space to a new location according to the quaternion 
            Center of rotation is 0,0,0 in model space
            Example   xyz = 0,1,2 rotated 90 degrees east becomes 2,1,0
            </summary>
            <param name="p1"></param>
        </member>
        <member name="T:ORTS.Camera">
            <summary>
            Base class for all cameras
            Represents a free roaming camera.
            </summary>
        </member>
        <member name="M:ORTS.Camera.Activate">
            <summary>
            Switches the <see cref="T:ORTS.Viewer3D"/> to this camera, updating the view information.
            </summary>
        </member>
        <member name="M:ORTS.Camera.OnActivate(System.Boolean)">
            <summary>
            A camera can use this method to handle any preparation when being activated.
            </summary>
        </member>
        <member name="M:ORTS.Camera.HandleUserInput(ORTS.ElapsedTime)">
            <summary>
            A camera can use this method to respond to user input.
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:ORTS.Camera.Update(ORTS.ElapsedTime)">
            <summary>
            A camera can use this method to update any calculated data that may have changed.
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:ORTS.Camera.GetCameraView">
            <summary>
            A camera should use this method to return a unique view.
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:ORTS.Camera.ScreenChanged">
            <summary>
            Notifies the camera that the screen dimensions have changed.
            </summary>
        </member>
        <member name="M:ORTS.Camera.PrepareFrame(ORTS.RenderFrame,ORTS.ElapsedTime)">
            <summary>
            Updates view and projection from this camera's data.
            </summary>
            <param name="frame"></param>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:ORTS.Camera.CanSee(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            If the nearest part of the object is within camera viewing distance
            and is within the object's defined viewing distance then
            we can see it.   The objectViewingDistance allows a small object
            to specify a cutoff beyond which the object can't be seen.
            </summary>
        </member>
        <member name="M:ORTS.Camera.XNALocation(ORTS.WorldLocation)">
            <summary>
            Returns a position in XNA space relative to the camera's tile
            </summary>
            <param name="worldLocation"></param>
            <returns></returns>
        </member>
        <member name="T:ORTS.AttachedCamera">
            <summary>
            This represents a camera attached to a car.  
            It moves with the car.
            </summary>
        </member>
        <member name="T:ORTS.BrakemanCamera">
            <summary>
            The brakeman is on the car at the front or back
            TODO, allow brakeman to jump on or off cars
            </summary>
        </member>
        <member name="T:ORTS.HeadOutCamera">
            <summary>
            The brakeman is on the car at the front or back
            TODO, allow brakeman to jump on or off cars
            </summary>
        </member>
        <member name="M:ORTS.CabCamera.OnActivate(System.Boolean)">
            <summary>
            Make this the viewer's current camera.
            If the locomotive has no cab view, then do nothing.
            </summary>
        </member>
        <member name="P:ORTS.CabCamera.SideLocation">
            <summary>
            Gets the current camera location in CAB
            </summary>
        </member>
        <member name="M:ORTS.TrackingCamera.UpdateOnboardLocation">
            <summary>
            From distance and elevation variables
            </summary>
        </member>
    </members>
</doc>
